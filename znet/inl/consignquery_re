	public:
		std::vector<GConsignItem> items;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_CONSIGNQUERY_RE };
	public:
		ConsignQuery_Re() { type = PROTOCOL_CONSIGNQUERY_RE; }
		ConsignQuery_Re(void*) : Protocol(PROTOCOL_CONSIGNQUERY_RE) { }
		ConsignQuery_Re (std::vector<GConsignItem> l_items,unsigned int l_localsid)
			 : items(l_items),localsid(l_localsid)
		{
			type = PROTOCOL_CONSIGNQUERY_RE;
		}

		ConsignQuery_Re(const ConsignQuery_Re &rhs)
			: Protocol(rhs),items(rhs.items),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new ConsignQuery_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << items;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> items;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 4096; }
