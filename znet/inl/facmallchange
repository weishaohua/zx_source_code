	public:
		int fid;
		std::set<int> mall_indexes;
		enum { PROTOCOL_TYPE = PROTOCOL_FACMALLCHANGE };
	public:
		FacMallChange() { type = PROTOCOL_FACMALLCHANGE; }
		FacMallChange(void*) : Protocol(PROTOCOL_FACMALLCHANGE) { }
		FacMallChange (int l_fid,const std::set<int>& l_mall_indexes = std::set<int>())
			 : fid(l_fid),mall_indexes(l_mall_indexes)
		{
			type = PROTOCOL_FACMALLCHANGE;
		}

		FacMallChange(const FacMallChange &rhs)
			: Protocol(rhs),fid(rhs.fid),mall_indexes(rhs.mall_indexes) { }

		GNET::Protocol *Clone() const { return new FacMallChange(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << fid;
			os << mall_indexes;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> fid;
			os >> mall_indexes;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 1024; }
