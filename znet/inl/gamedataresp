	public:
		int dtype;
		int64_t id;
		char retcode;
		Octets data;
		enum { PROTOCOL_TYPE = PROTOCOL_GAMEDATARESP };
	public:
		GameDataResp() { type = PROTOCOL_GAMEDATARESP; }
		GameDataResp(void*) : Protocol(PROTOCOL_GAMEDATARESP) { }
		GameDataResp (int l_dtype,int64_t l_id,char l_retcode,
			const Octets& l_data)
			 : dtype(l_dtype),id(l_id),retcode(l_retcode)
			,data(l_data)
		{
			type = PROTOCOL_GAMEDATARESP;
		}

		GameDataResp(const GameDataResp &rhs)
			: Protocol(rhs),dtype(rhs.dtype),id(rhs.id),retcode(rhs.retcode)
			,data(rhs.data) { }

		GNET::Protocol *Clone() const { return new GameDataResp(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << dtype;
			os << id;
			os << retcode;
			os << data;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> dtype;
			os >> id;
			os >> retcode;
			os >> data;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 1048576; }
