	public:
		int userid;
		int zoneid;
		enum { PROTOCOL_TYPE = PROTOCOL_KICKOUTREMOTEUSER };
	public:
		KickoutRemoteUser() { type = PROTOCOL_KICKOUTREMOTEUSER; }
		KickoutRemoteUser(void*) : Protocol(PROTOCOL_KICKOUTREMOTEUSER) { }
		KickoutRemoteUser (int l_userid,int l_zoneid = 0)
			 : userid(l_userid),zoneid(l_zoneid)
		{
			type = PROTOCOL_KICKOUTREMOTEUSER;
		}

		KickoutRemoteUser(const KickoutRemoteUser &rhs)
			: Protocol(rhs),userid(rhs.userid),zoneid(rhs.zoneid) { }

		GNET::Protocol *Clone() const { return new KickoutRemoteUser(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << userid;
			os << zoneid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> userid;
			os >> zoneid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
