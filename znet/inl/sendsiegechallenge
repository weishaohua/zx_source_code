	public:
		int roleid;
		int battle_id;
		int factionid;
		char day;
		int attach_obj_id;
		GMailSyncData syncdata;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_SENDSIEGECHALLENGE };
	public:
		SendSiegeChallenge() { type = PROTOCOL_SENDSIEGECHALLENGE; }
		SendSiegeChallenge(void*) : Protocol(PROTOCOL_SENDSIEGECHALLENGE) { }
		SendSiegeChallenge (int l_roleid,int l_battle_id,int l_factionid,
			char l_day = 0,int l_attach_obj_id = 0,const GMailSyncData& l_syncdata = GMailSyncData(),
			unsigned int l_localsid = 0)
			 : roleid(l_roleid),battle_id(l_battle_id),factionid(l_factionid)
			,day(l_day),attach_obj_id(l_attach_obj_id),syncdata(l_syncdata)
			,localsid(l_localsid)
		{
			type = PROTOCOL_SENDSIEGECHALLENGE;
		}

		SendSiegeChallenge(const SendSiegeChallenge &rhs)
			: Protocol(rhs),roleid(rhs.roleid),battle_id(rhs.battle_id),factionid(rhs.factionid)
			,day(rhs.day),attach_obj_id(rhs.attach_obj_id),syncdata(rhs.syncdata)
			,localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new SendSiegeChallenge(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << battle_id;
			os << factionid;
			os << day;
			os << attach_obj_id;
			os << syncdata;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> battle_id;
			os >> factionid;
			os >> day;
			os >> attach_obj_id;
			os >> syncdata;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 2097152; }
