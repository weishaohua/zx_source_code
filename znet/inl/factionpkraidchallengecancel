	public:
		int roleid;
		int map_id;
		unsigned int dst_factionid;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_FACTIONPKRAIDCHALLENGECANCEL };
	public:
		FactionPkRaidChallengeCancel() { type = PROTOCOL_FACTIONPKRAIDCHALLENGECANCEL; }
		FactionPkRaidChallengeCancel(void*) : Protocol(PROTOCOL_FACTIONPKRAIDCHALLENGECANCEL) { }
		FactionPkRaidChallengeCancel (int l_roleid,int l_map_id,unsigned int l_dst_factionid = 0,
			unsigned int l_localsid = 0)
			 : roleid(l_roleid),map_id(l_map_id),dst_factionid(l_dst_factionid)
			,localsid(l_localsid)
		{
			type = PROTOCOL_FACTIONPKRAIDCHALLENGECANCEL;
		}

		FactionPkRaidChallengeCancel(const FactionPkRaidChallengeCancel &rhs)
			: Protocol(rhs),roleid(rhs.roleid),map_id(rhs.map_id),dst_factionid(rhs.dst_factionid)
			,localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new FactionPkRaidChallengeCancel(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << map_id;
			os << dst_factionid;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> map_id;
			os >> dst_factionid;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
