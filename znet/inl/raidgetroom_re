	public:
		unsigned short retcode;
		int raidroom_id;
		int map_id;
		std::vector<GBattleRole> group1_player;
		std::vector<GBattleRole> group1_applyer;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_RAIDGETROOM_RE };
	public:
		RaidGetRoom_Re() { type = PROTOCOL_RAIDGETROOM_RE; }
		RaidGetRoom_Re(void*) : Protocol(PROTOCOL_RAIDGETROOM_RE) { }
		RaidGetRoom_Re (unsigned short l_retcode,int l_raidroom_id = 0,int l_map_id = 0,
			const std::vector<GBattleRole>& l_group1_player = std::vector<GBattleRole>(),const std::vector<GBattleRole>& l_group1_applyer = std::vector<GBattleRole>(),unsigned int l_localsid = 0)
			 : retcode(l_retcode),raidroom_id(l_raidroom_id),map_id(l_map_id)
			,group1_player(l_group1_player),group1_applyer(l_group1_applyer),localsid(l_localsid)
		{
			type = PROTOCOL_RAIDGETROOM_RE;
		}

		RaidGetRoom_Re(const RaidGetRoom_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),raidroom_id(rhs.raidroom_id),map_id(rhs.map_id)
			,group1_player(rhs.group1_player),group1_applyer(rhs.group1_applyer),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new RaidGetRoom_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << raidroom_id;
			os << map_id;
			os << group1_player;
			os << group1_applyer;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> raidroom_id;
			os >> map_id;
			os >> group1_player;
			os >> group1_applyer;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 2048; }
