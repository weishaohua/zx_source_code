	public:
		int roleid;
		int gs_id;
		int map_id;
		int queue_number;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_OPENBANQUETQUEUECOUNT_RE };
	public:
		OpenBanquetQueueCount_Re() { type = PROTOCOL_OPENBANQUETQUEUECOUNT_RE; }
		OpenBanquetQueueCount_Re(void*) : Protocol(PROTOCOL_OPENBANQUETQUEUECOUNT_RE) { }
		OpenBanquetQueueCount_Re (int l_roleid,int l_gs_id,int l_map_id = 0,
			int l_queue_number = 0,unsigned int l_localsid = 0)
			 : roleid(l_roleid),gs_id(l_gs_id),map_id(l_map_id)
			,queue_number(l_queue_number),localsid(l_localsid)
		{
			type = PROTOCOL_OPENBANQUETQUEUECOUNT_RE;
		}

		OpenBanquetQueueCount_Re(const OpenBanquetQueueCount_Re &rhs)
			: Protocol(rhs),roleid(rhs.roleid),gs_id(rhs.gs_id),map_id(rhs.map_id)
			,queue_number(rhs.queue_number),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new OpenBanquetQueueCount_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << gs_id;
			os << map_id;
			os << queue_number;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> gs_id;
			os >> map_id;
			os >> queue_number;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 20; }
