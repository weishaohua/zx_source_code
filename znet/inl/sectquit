	public:
		int sectid;
		unsigned char reason;
		int disciple;
		Octets name;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_SECTQUIT };
	public:
		SectQuit() { type = PROTOCOL_SECTQUIT; }
		SectQuit(void*) : Protocol(PROTOCOL_SECTQUIT) { }
		SectQuit (int l_sectid,unsigned char l_reason,int l_disciple,
			const Octets& l_name = Octets(0),unsigned int l_localsid = 0)
			 : sectid(l_sectid),reason(l_reason),disciple(l_disciple)
			,name(l_name),localsid(l_localsid)
		{
			type = PROTOCOL_SECTQUIT;
		}

		SectQuit(const SectQuit &rhs)
			: Protocol(rhs),sectid(rhs.sectid),reason(rhs.reason),disciple(rhs.disciple)
			,name(rhs.name),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new SectQuit(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << sectid;
			os << reason;
			os << disciple;
			os << name;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> sectid;
			os >> reason;
			os >> disciple;
			os >> name;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 128; }
