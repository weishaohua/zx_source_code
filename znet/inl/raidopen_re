	public:
		int retcode;
		int raidroom_id;
		int map_id;
		Octets roomname;
		int apply_endtime;
		unsigned int localsid;
		char difficulty;
		enum { PROTOCOL_TYPE = PROTOCOL_RAIDOPEN_RE };
	public:
		RaidOpen_Re() { type = PROTOCOL_RAIDOPEN_RE; }
		RaidOpen_Re(void*) : Protocol(PROTOCOL_RAIDOPEN_RE) { }
		RaidOpen_Re (int l_retcode,int l_raidroom_id = 0,int l_map_id = 0,
			const Octets& l_roomname = Octets(),int l_apply_endtime = 0,unsigned int l_localsid = 0,
			char l_difficulty = 0)
			 : retcode(l_retcode),raidroom_id(l_raidroom_id),map_id(l_map_id)
			,roomname(l_roomname),apply_endtime(l_apply_endtime),localsid(l_localsid)
			,difficulty(l_difficulty)
		{
			type = PROTOCOL_RAIDOPEN_RE;
		}

		RaidOpen_Re(const RaidOpen_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),raidroom_id(rhs.raidroom_id),map_id(rhs.map_id)
			,roomname(rhs.roomname),apply_endtime(rhs.apply_endtime),localsid(rhs.localsid)
			,difficulty(rhs.difficulty) { }

		GNET::Protocol *Clone() const { return new RaidOpen_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << raidroom_id;
			os << map_id;
			os << roomname;
			os << apply_endtime;
			os << localsid;
			os << difficulty;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> raidroom_id;
			os >> map_id;
			os >> roomname;
			os >> apply_endtime;
			os >> localsid;
			os >> difficulty;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 64; }
