	public:
		int userid;
		unsigned int localsid;
		unsigned char cause;
		enum { PROTOCOL_TYPE = PROTOCOL_KICKOUTUSER };
	public:
		KickoutUser() { type = PROTOCOL_KICKOUTUSER; }
		KickoutUser(void*) : Protocol(PROTOCOL_KICKOUTUSER) { }
		KickoutUser (int l_userid,unsigned int l_localsid,unsigned char l_cause = ERR_KICKOUT)
			 : userid(l_userid),localsid(l_localsid),cause(l_cause)
		{
			type = PROTOCOL_KICKOUTUSER;
		}

		KickoutUser(const KickoutUser &rhs)
			: Protocol(rhs),userid(rhs.userid),localsid(rhs.localsid),cause(rhs.cause) { }

		GNET::Protocol *Clone() const { return new KickoutUser(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << userid;
			os << localsid;
			os << cause;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> userid;
			os >> localsid;
			os >> cause;
			return os;
		}

		int PriorPolicy( ) const { return 101; }

		bool SizePolicy(size_t size) const { return size <= 32; }
