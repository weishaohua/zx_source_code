	public:
		int64_t userid;
		int64_t roleid;
		int zoneid;
		int64_t seq;
		int64_t timestamp;
		enum { PROTOCOL_TYPE = PROTOCOL_ROLEENTERVOICECHANNELACK };
	public:
		RoleEnterVoiceChannelAck() { type = PROTOCOL_ROLEENTERVOICECHANNELACK; }
		RoleEnterVoiceChannelAck(void*) : Protocol(PROTOCOL_ROLEENTERVOICECHANNELACK) { }
		RoleEnterVoiceChannelAck (int64_t l_userid,int64_t l_roleid,int l_zoneid,
			int64_t l_seq,int64_t l_timestamp)
			 : userid(l_userid),roleid(l_roleid),zoneid(l_zoneid)
			,seq(l_seq),timestamp(l_timestamp)
		{
			type = PROTOCOL_ROLEENTERVOICECHANNELACK;
		}

		RoleEnterVoiceChannelAck(const RoleEnterVoiceChannelAck &rhs)
			: Protocol(rhs),userid(rhs.userid),roleid(rhs.roleid),zoneid(rhs.zoneid)
			,seq(rhs.seq),timestamp(rhs.timestamp) { }

		GNET::Protocol *Clone() const { return new RoleEnterVoiceChannelAck(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << userid;
			os << roleid;
			os << zoneid;
			os << seq;
			os << timestamp;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> userid;
			os >> roleid;
			os >> zoneid;
			os >> seq;
			os >> timestamp;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 2048; }
