	public:
		int retcode;
		int gs_id;
		int map_id;
		unsigned char team;
		int starttime;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_INSTANCINGJOIN_RE };
	public:
		InstancingJoin_Re() { type = PROTOCOL_INSTANCINGJOIN_RE; }
		InstancingJoin_Re(void*) : Protocol(PROTOCOL_INSTANCINGJOIN_RE) { }
		InstancingJoin_Re (int l_retcode,int l_gs_id = 0,int l_map_id = 0,
			unsigned char l_team = 0,int l_starttime = 0,unsigned int l_localsid = 0)
			 : retcode(l_retcode),gs_id(l_gs_id),map_id(l_map_id)
			,team(l_team),starttime(l_starttime),localsid(l_localsid)
		{
			type = PROTOCOL_INSTANCINGJOIN_RE;
		}

		InstancingJoin_Re(const InstancingJoin_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),gs_id(rhs.gs_id),map_id(rhs.map_id)
			,team(rhs.team),starttime(rhs.starttime),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new InstancingJoin_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << gs_id;
			os << map_id;
			os << team;
			os << starttime;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> gs_id;
			os >> map_id;
			os >> team;
			os >> starttime;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 128; }
