	public:
		unsigned char accept;
		int masterid;
		int map_id;
		int raidroom_id;
		int requester;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_RAIDJOINACCEPT };
	public:
		RaidJoinAccept() { type = PROTOCOL_RAIDJOINACCEPT; }
		RaidJoinAccept(void*) : Protocol(PROTOCOL_RAIDJOINACCEPT) { }
		RaidJoinAccept (unsigned char l_accept,int l_masterid = 0,int l_map_id = 0,
			int l_raidroom_id = 0,int l_requester = 0,unsigned int l_localsid = 0)
			 : accept(l_accept),masterid(l_masterid),map_id(l_map_id)
			,raidroom_id(l_raidroom_id),requester(l_requester),localsid(l_localsid)
		{
			type = PROTOCOL_RAIDJOINACCEPT;
		}

		RaidJoinAccept(const RaidJoinAccept &rhs)
			: Protocol(rhs),accept(rhs.accept),masterid(rhs.masterid),map_id(rhs.map_id)
			,raidroom_id(rhs.raidroom_id),requester(rhs.requester),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new RaidJoinAccept(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << accept;
			os << masterid;
			os << map_id;
			os << raidroom_id;
			os << requester;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> accept;
			os >> masterid;
			os >> map_id;
			os >> raidroom_id;
			os >> requester;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
