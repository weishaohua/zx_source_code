	public:
		int gs_id;
		std::vector<RaidFieldInfo> fields;
		enum { PROTOCOL_TYPE = PROTOCOL_GRAIDSERVERREGISTER };
	public:
		GRaidServerRegister() { type = PROTOCOL_GRAIDSERVERREGISTER; }
		GRaidServerRegister(void*) : Protocol(PROTOCOL_GRAIDSERVERREGISTER) { }
		GRaidServerRegister (int l_gs_id,const std::vector<RaidFieldInfo>& l_fields = std::vector<RaidFieldInfo>())
			 : gs_id(l_gs_id),fields(l_fields)
		{
			type = PROTOCOL_GRAIDSERVERREGISTER;
		}

		GRaidServerRegister(const GRaidServerRegister &rhs)
			: Protocol(rhs),gs_id(rhs.gs_id),fields(rhs.fields) { }

		GNET::Protocol *Clone() const { return new GRaidServerRegister(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << gs_id;
			os << fields;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> gs_id;
			os >> fields;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 8192; }
