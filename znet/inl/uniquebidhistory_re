	public:
		int retcode;
		int status;
		int item_tobid;
		int money_min;
		std::vector<UniqueWinner> winner_list;
		std::vector<UniquePriceInfo> self_bid_list;
		int winner;
		int win_item;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_UNIQUEBIDHISTORY_RE };
	public:
		UniqueBidHistory_Re() { type = PROTOCOL_UNIQUEBIDHISTORY_RE; }
		UniqueBidHistory_Re(void*) : Protocol(PROTOCOL_UNIQUEBIDHISTORY_RE) { }
		UniqueBidHistory_Re (int l_retcode,int l_status = 0,int l_item_tobid = 0,
			int l_money_min = 0,std::vector<UniqueWinner> l_winner_list = std::vector<UniqueWinner>(),const std::vector<UniquePriceInfo>& l_self_bid_list = std::vector<UniquePriceInfo>(),
			int l_winner = 0,int l_win_item = 0,unsigned int l_localsid = 0)
			 : retcode(l_retcode),status(l_status),item_tobid(l_item_tobid)
			,money_min(l_money_min),winner_list(l_winner_list),self_bid_list(l_self_bid_list)
			,winner(l_winner),win_item(l_win_item),localsid(l_localsid)
		{
			type = PROTOCOL_UNIQUEBIDHISTORY_RE;
		}

		UniqueBidHistory_Re(const UniqueBidHistory_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),status(rhs.status),item_tobid(rhs.item_tobid)
			,money_min(rhs.money_min),winner_list(rhs.winner_list),self_bid_list(rhs.self_bid_list)
			,winner(rhs.winner),win_item(rhs.win_item),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new UniqueBidHistory_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << status;
			os << item_tobid;
			os << money_min;
			os << winner_list;
			os << self_bid_list;
			os << winner;
			os << win_item;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> status;
			os >> item_tobid;
			os >> money_min;
			os >> winner_list;
			os >> self_bid_list;
			os >> winner;
			os >> win_item;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 65536; }
