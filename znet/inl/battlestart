	public:
		int gs_id;
		int tag;
		int map_id;
		int end_time;
		int apply_count;
		char battle_type;
		enum { PROTOCOL_TYPE = PROTOCOL_BATTLESTART };
	public:
		BattleStart() { type = PROTOCOL_BATTLESTART; }
		BattleStart(void*) : Protocol(PROTOCOL_BATTLESTART) { }
		BattleStart (int l_gs_id,int l_tag = 0,int l_map_id = 0,
			int l_end_time = 0,int l_apply_count = 0,char l_battle_type = 0)
			 : gs_id(l_gs_id),tag(l_tag),map_id(l_map_id)
			,end_time(l_end_time),apply_count(l_apply_count),battle_type(l_battle_type)
		{
			type = PROTOCOL_BATTLESTART;
		}

		BattleStart(const BattleStart &rhs)
			: Protocol(rhs),gs_id(rhs.gs_id),tag(rhs.tag),map_id(rhs.map_id)
			,end_time(rhs.end_time),apply_count(rhs.apply_count),battle_type(rhs.battle_type) { }

		GNET::Protocol *Clone() const { return new BattleStart(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << gs_id;
			os << tag;
			os << map_id;
			os << end_time;
			os << apply_count;
			os << battle_type;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> gs_id;
			os >> tag;
			os >> map_id;
			os >> end_time;
			os >> apply_count;
			os >> battle_type;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 64; }
