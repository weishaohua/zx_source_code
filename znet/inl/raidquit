	public:
		int roleid;
		int raidroom_id;
		unsigned char team;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_RAIDQUIT };
	public:
		RaidQuit() { type = PROTOCOL_RAIDQUIT; }
		RaidQuit(void*) : Protocol(PROTOCOL_RAIDQUIT) { }
		RaidQuit (int l_roleid,int l_raidroom_id = 0,unsigned char l_team = 0,
			unsigned int l_localsid = 0)
			 : roleid(l_roleid),raidroom_id(l_raidroom_id),team(l_team)
			,localsid(l_localsid)
		{
			type = PROTOCOL_RAIDQUIT;
		}

		RaidQuit(const RaidQuit &rhs)
			: Protocol(rhs),roleid(rhs.roleid),raidroom_id(rhs.raidroom_id),team(rhs.team)
			,localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new RaidQuit(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << raidroom_id;
			os << team;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> raidroom_id;
			os >> team;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 16; }
