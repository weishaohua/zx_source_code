	public:
		int retcode;
		int roleid;
		int pageid;
		unsigned int localsid;
		int fid;
		std::vector<Octets> dynamic;
		int totalsize;
		enum { PROTOCOL_TYPE = PROTOCOL_GETFACTIONDYNAMIC_RE };
	public:
		GetFactionDynamic_Re() { type = PROTOCOL_GETFACTIONDYNAMIC_RE; }
		GetFactionDynamic_Re(void*) : Protocol(PROTOCOL_GETFACTIONDYNAMIC_RE) { }
		GetFactionDynamic_Re (int l_retcode,int l_roleid,int l_pageid = 0,
			unsigned int l_localsid = 0,int l_fid = 0,const std::vector<Octets>& l_dynamic = std::vector<Octets>(),
			int l_totalsize = 0)
			 : retcode(l_retcode),roleid(l_roleid),pageid(l_pageid)
			,localsid(l_localsid),fid(l_fid),dynamic(l_dynamic)
			,totalsize(l_totalsize)
		{
			type = PROTOCOL_GETFACTIONDYNAMIC_RE;
		}

		GetFactionDynamic_Re(const GetFactionDynamic_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),roleid(rhs.roleid),pageid(rhs.pageid)
			,localsid(rhs.localsid),fid(rhs.fid),dynamic(rhs.dynamic)
			,totalsize(rhs.totalsize) { }

		GNET::Protocol *Clone() const { return new GetFactionDynamic_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << roleid;
			os << pageid;
			os << localsid;
			os << fid;
			os << dynamic;
			os << totalsize;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> roleid;
			os >> pageid;
			os >> localsid;
			os >> fid;
			os >> dynamic;
			os >> totalsize;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 65536; }
