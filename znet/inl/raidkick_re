	public:
		int retcode;
		int target;
		int raidroom_id;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_RAIDKICK_RE };
	public:
		RaidKick_Re() { type = PROTOCOL_RAIDKICK_RE; }
		RaidKick_Re(void*) : Protocol(PROTOCOL_RAIDKICK_RE) { }
		RaidKick_Re (int l_retcode,int l_target = 0,int l_raidroom_id = 0,
			unsigned int l_localsid = 0)
			 : retcode(l_retcode),target(l_target),raidroom_id(l_raidroom_id)
			,localsid(l_localsid)
		{
			type = PROTOCOL_RAIDKICK_RE;
		}

		RaidKick_Re(const RaidKick_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),target(rhs.target),raidroom_id(rhs.raidroom_id)
			,localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new RaidKick_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << target;
			os << raidroom_id;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> target;
			os >> raidroom_id;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 16; }
