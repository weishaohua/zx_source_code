	public:
		int retcode;
		int teamid;
		int master;
		Octets name;
		int score;
		int battle_losses ;
		int battle_draws ;
		int battle_wins;
		int team_pos;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_CRSSVRTEAMSTEAMBASE_RE };
	public:
		CrssvrTeamsTeamBase_Re() { type = PROTOCOL_CRSSVRTEAMSTEAMBASE_RE; }
		CrssvrTeamsTeamBase_Re(void*) : Protocol(PROTOCOL_CRSSVRTEAMSTEAMBASE_RE) { }
		CrssvrTeamsTeamBase_Re (int l_retcode,int l_teamid,int l_master = -1,
			const Octets& l_name = Octets(),int l_score = 0,int l_battle_losses  = 0,
			int l_battle_draws  = 0,int l_battle_wins = 0,int l_team_pos = -1,
			unsigned int l_localsid = 0)
			 : retcode(l_retcode),teamid(l_teamid),master(l_master)
			,name(l_name),score(l_score),battle_losses (l_battle_losses )
			,battle_draws (l_battle_draws ),battle_wins(l_battle_wins),team_pos(l_team_pos)
			,localsid(l_localsid)
		{
			type = PROTOCOL_CRSSVRTEAMSTEAMBASE_RE;
		}

		CrssvrTeamsTeamBase_Re(const CrssvrTeamsTeamBase_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),teamid(rhs.teamid),master(rhs.master)
			,name(rhs.name),score(rhs.score),battle_losses (rhs.battle_losses )
			,battle_draws (rhs.battle_draws ),battle_wins(rhs.battle_wins),team_pos(rhs.team_pos)
			,localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new CrssvrTeamsTeamBase_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << teamid;
			os << master;
			os << name;
			os << score;
			os << battle_losses ;
			os << battle_draws ;
			os << battle_wins;
			os << team_pos;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> teamid;
			os >> master;
			os >> name;
			os >> score;
			os >> battle_losses ;
			os >> battle_draws ;
			os >> battle_wins;
			os >> team_pos;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 1024; }
