	public:
		int gs_id;
		int map_id;
		int index;
		int result;
		enum { PROTOCOL_TYPE = PROTOCOL_GRAIDEND };
	public:
		GRaidEnd() { type = PROTOCOL_GRAIDEND; }
		GRaidEnd(void*) : Protocol(PROTOCOL_GRAIDEND) { }
		GRaidEnd (int l_gs_id,int l_map_id = 0,int l_index = 0,
			int l_result = -2)
			 : gs_id(l_gs_id),map_id(l_map_id),index(l_index)
			,result(l_result)
		{
			type = PROTOCOL_GRAIDEND;
		}

		GRaidEnd(const GRaidEnd &rhs)
			: Protocol(rhs),gs_id(rhs.gs_id),map_id(rhs.map_id),index(rhs.index)
			,result(rhs.result) { }

		GNET::Protocol *Clone() const { return new GRaidEnd(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << gs_id;
			os << map_id;
			os << index;
			os << result;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> gs_id;
			os >> map_id;
			os >> index;
			os >> result;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 16; }
