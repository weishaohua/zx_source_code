	public:
		Octets data;
		enum { PROTOCOL_TYPE = PROTOCOL_FUNGAMEDATASEND };
	public:
		FunGamedataSend() { type = PROTOCOL_FUNGAMEDATASEND; }
		FunGamedataSend(void*) : Protocol(PROTOCOL_FUNGAMEDATASEND) { }
		FunGamedataSend (const Octets& l_data)
			 : data(l_data)
		{
			type = PROTOCOL_FUNGAMEDATASEND;
		}

		FunGamedataSend(const FunGamedataSend &rhs)
			: Protocol(rhs),data(rhs.data) { }

		GNET::Protocol *Clone() const { return new FunGamedataSend(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << data;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> data;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32768; }
