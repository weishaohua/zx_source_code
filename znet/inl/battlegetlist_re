	public:
		unsigned short retcode;
		unsigned short enter_times;
		std::vector<GFieldInfo> fields;
		char battle_type;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_BATTLEGETLIST_RE };
	public:
		BattleGetList_Re() { type = PROTOCOL_BATTLEGETLIST_RE; }
		BattleGetList_Re(void*) : Protocol(PROTOCOL_BATTLEGETLIST_RE) { }
		BattleGetList_Re (unsigned short l_retcode,unsigned short l_enter_times,std::vector<GFieldInfo> l_fields = std::vector<GFieldInfo>(),
			char l_battle_type = 0,unsigned int l_localsid = 0)
			 : retcode(l_retcode),enter_times(l_enter_times),fields(l_fields)
			,battle_type(l_battle_type),localsid(l_localsid)
		{
			type = PROTOCOL_BATTLEGETLIST_RE;
		}

		BattleGetList_Re(const BattleGetList_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),enter_times(rhs.enter_times),fields(rhs.fields)
			,battle_type(rhs.battle_type),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new BattleGetList_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << enter_times;
			os << fields;
			os << battle_type;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> enter_times;
			os >> fields;
			os >> battle_type;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 10240; }
