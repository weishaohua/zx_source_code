	public:
		int gs_id;
		int map_id;
		int tag;
		int roleid;
		int reason;
		enum { PROTOCOL_TYPE = PROTOCOL_GBATTLELEAVE };
	public:
		GBattleLeave() { type = PROTOCOL_GBATTLELEAVE; }
		GBattleLeave(void*) : Protocol(PROTOCOL_GBATTLELEAVE) { }
		GBattleLeave (int l_gs_id,int l_map_id = 0,int l_tag = 0,
			int l_roleid = 0,int l_reason = 0)
			 : gs_id(l_gs_id),map_id(l_map_id),tag(l_tag)
			,roleid(l_roleid),reason(l_reason)
		{
			type = PROTOCOL_GBATTLELEAVE;
		}

		GBattleLeave(const GBattleLeave &rhs)
			: Protocol(rhs),gs_id(rhs.gs_id),map_id(rhs.map_id),tag(rhs.tag)
			,roleid(rhs.roleid),reason(rhs.reason) { }

		GNET::Protocol *Clone() const { return new GBattleLeave(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << gs_id;
			os << map_id;
			os << tag;
			os << roleid;
			os << reason;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> gs_id;
			os >> map_id;
			os >> tag;
			os >> roleid;
			os >> reason;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 128; }
