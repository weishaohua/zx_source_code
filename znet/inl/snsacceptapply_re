	public:
		int retcode;
		int roleid;
		int apply_roleid;
		char message_type;
		int message_id;
		char oper;
		int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_SNSACCEPTAPPLY_RE };
	public:
		SNSAcceptApply_Re() { type = PROTOCOL_SNSACCEPTAPPLY_RE; }
		SNSAcceptApply_Re(void*) : Protocol(PROTOCOL_SNSACCEPTAPPLY_RE) { }
		SNSAcceptApply_Re (int l_retcode,int l_roleid = 0,int l_apply_roleid = 0,
			char l_message_type = 0,int l_message_id = 0,char l_oper = 0,
			int l_localsid = 0)
			 : retcode(l_retcode),roleid(l_roleid),apply_roleid(l_apply_roleid)
			,message_type(l_message_type),message_id(l_message_id),oper(l_oper)
			,localsid(l_localsid)
		{
			type = PROTOCOL_SNSACCEPTAPPLY_RE;
		}

		SNSAcceptApply_Re(const SNSAcceptApply_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),roleid(rhs.roleid),apply_roleid(rhs.apply_roleid)
			,message_type(rhs.message_type),message_id(rhs.message_id),oper(rhs.oper)
			,localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new SNSAcceptApply_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << roleid;
			os << apply_roleid;
			os << message_type;
			os << message_id;
			os << oper;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> roleid;
			os >> apply_roleid;
			os >> message_type;
			os >> message_id;
			os >> oper;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 64; }
