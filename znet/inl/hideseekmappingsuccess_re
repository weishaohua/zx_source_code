	public:
		int roleid;
		int raidroom_id;
		unsigned int localsid;
		char agree;
		char iscross;
		enum { PROTOCOL_TYPE = PROTOCOL_HIDESEEKMAPPINGSUCCESS_RE };
	public:
		HideSeekMappingSuccess_Re() { type = PROTOCOL_HIDESEEKMAPPINGSUCCESS_RE; }
		HideSeekMappingSuccess_Re(void*) : Protocol(PROTOCOL_HIDESEEKMAPPINGSUCCESS_RE) { }
		HideSeekMappingSuccess_Re (int l_roleid,int l_raidroom_id = 0,unsigned int l_localsid = 0,
			char l_agree = 0,char l_iscross = 0)
			 : roleid(l_roleid),raidroom_id(l_raidroom_id),localsid(l_localsid)
			,agree(l_agree),iscross(l_iscross)
		{
			type = PROTOCOL_HIDESEEKMAPPINGSUCCESS_RE;
		}

		HideSeekMappingSuccess_Re(const HideSeekMappingSuccess_Re &rhs)
			: Protocol(rhs),roleid(rhs.roleid),raidroom_id(rhs.raidroom_id),localsid(rhs.localsid)
			,agree(rhs.agree),iscross(rhs.iscross) { }

		GNET::Protocol *Clone() const { return new HideSeekMappingSuccess_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << raidroom_id;
			os << localsid;
			os << agree;
			os << iscross;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> raidroom_id;
			os >> localsid;
			os >> agree;
			os >> iscross;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
