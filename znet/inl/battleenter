	public:
		int roleid;
		int gs_id;
		int map_id;
		char battle_type;
		unsigned int localsid;
		char iscross;
		enum { PROTOCOL_TYPE = PROTOCOL_BATTLEENTER };
	public:
		BattleEnter() { type = PROTOCOL_BATTLEENTER; }
		BattleEnter(void*) : Protocol(PROTOCOL_BATTLEENTER) { }
		BattleEnter (int l_roleid,int l_gs_id = 0,int l_map_id = 0,
			char l_battle_type = 0,unsigned int l_localsid = 0,char l_iscross = 0)
			 : roleid(l_roleid),gs_id(l_gs_id),map_id(l_map_id)
			,battle_type(l_battle_type),localsid(l_localsid),iscross(l_iscross)
		{
			type = PROTOCOL_BATTLEENTER;
		}

		BattleEnter(const BattleEnter &rhs)
			: Protocol(rhs),roleid(rhs.roleid),gs_id(rhs.gs_id),map_id(rhs.map_id)
			,battle_type(rhs.battle_type),localsid(rhs.localsid),iscross(rhs.iscross) { }

		GNET::Protocol *Clone() const { return new BattleEnter(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << gs_id;
			os << map_id;
			os << battle_type;
			os << localsid;
			os << iscross;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> gs_id;
			os >> map_id;
			os >> battle_type;
			os >> localsid;
			os >> iscross;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
