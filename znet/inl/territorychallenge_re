	public:
		int retcode;
		int roleid;
		int territoryid;
		int itemcount;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_TERRITORYCHALLENGE_RE };
	public:
		TerritoryChallenge_Re() { type = PROTOCOL_TERRITORYCHALLENGE_RE; }
		TerritoryChallenge_Re(void*) : Protocol(PROTOCOL_TERRITORYCHALLENGE_RE) { }
		TerritoryChallenge_Re (int l_retcode,int l_roleid = 0,int l_territoryid = 0,
			int l_itemcount = 0,unsigned int l_localsid = 0)
			 : retcode(l_retcode),roleid(l_roleid),territoryid(l_territoryid)
			,itemcount(l_itemcount),localsid(l_localsid)
		{
			type = PROTOCOL_TERRITORYCHALLENGE_RE;
		}

		TerritoryChallenge_Re(const TerritoryChallenge_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),roleid(rhs.roleid),territoryid(rhs.territoryid)
			,itemcount(rhs.itemcount),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new TerritoryChallenge_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << roleid;
			os << territoryid;
			os << itemcount;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> roleid;
			os >> territoryid;
			os >> itemcount;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 64; }
