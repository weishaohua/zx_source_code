	public:
		int roleid;
		int territoryid;
		unsigned int factionid;
		int itemid;
		int item_count;
		GMailSyncData syncdata;
		enum { PROTOCOL_TYPE = PROTOCOL_GTERRITORYCHALLENGE };
	public:
		GTerritoryChallenge() { type = PROTOCOL_GTERRITORYCHALLENGE; }
		GTerritoryChallenge(void*) : Protocol(PROTOCOL_GTERRITORYCHALLENGE) { }
		GTerritoryChallenge (int l_roleid,int l_territoryid,unsigned int l_factionid,
			int l_itemid = -1,int l_item_count = 0,const GMailSyncData& l_syncdata = GMailSyncData())
			 : roleid(l_roleid),territoryid(l_territoryid),factionid(l_factionid)
			,itemid(l_itemid),item_count(l_item_count),syncdata(l_syncdata)
		{
			type = PROTOCOL_GTERRITORYCHALLENGE;
		}

		GTerritoryChallenge(const GTerritoryChallenge &rhs)
			: Protocol(rhs),roleid(rhs.roleid),territoryid(rhs.territoryid),factionid(rhs.factionid)
			,itemid(rhs.itemid),item_count(rhs.item_count),syncdata(rhs.syncdata) { }

		GNET::Protocol *Clone() const { return new GTerritoryChallenge(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << territoryid;
			os << factionid;
			os << itemid;
			os << item_count;
			os << syncdata;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> territoryid;
			os >> factionid;
			os >> itemid;
			os >> item_count;
			os >> syncdata;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 2097152; }
