	public:
		char fieldtype;
		int tagid;
		int defender;
		std::vector<int> attackers;
		Octets def_name;
		enum { PROTOCOL_TYPE = PROTOCOL_KINGDOMBATTLESTART };
	public:
		KingdomBattleStart() { type = PROTOCOL_KINGDOMBATTLESTART; }
		KingdomBattleStart(void*) : Protocol(PROTOCOL_KINGDOMBATTLESTART) { }
		KingdomBattleStart (char l_fieldtype,int l_tagid = 0,int l_defender = 0,
			const std::vector<int>& l_attackers = std::vector<int>(),Octets l_def_name = Octets())
			 : fieldtype(l_fieldtype),tagid(l_tagid),defender(l_defender)
			,attackers(l_attackers),def_name(l_def_name)
		{
			type = PROTOCOL_KINGDOMBATTLESTART;
		}

		KingdomBattleStart(const KingdomBattleStart &rhs)
			: Protocol(rhs),fieldtype(rhs.fieldtype),tagid(rhs.tagid),defender(rhs.defender)
			,attackers(rhs.attackers),def_name(rhs.def_name) { }

		GNET::Protocol *Clone() const { return new KingdomBattleStart(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << fieldtype;
			os << tagid;
			os << defender;
			os << attackers;
			os << def_name;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> fieldtype;
			os >> tagid;
			os >> defender;
			os >> attackers;
			os >> def_name;
			return os;
		}

		bool SizePolicy(size_t size) const { return size <= 128; }
