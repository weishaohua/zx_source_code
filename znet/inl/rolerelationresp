	public:
		int64_t userid;
		RoleBean roleinfo;
		std::vector<FactionIDBean> factions;
		std::vector<RoleGroupBean> friends;
		std::vector<RoleInfoBean> blacklist;
		enum { PROTOCOL_TYPE = PROTOCOL_ROLERELATIONRESP };
	public:
		RoleRelationResp() { type = PROTOCOL_ROLERELATIONRESP; }
		RoleRelationResp(void*) : Protocol(PROTOCOL_ROLERELATIONRESP) { }
		RoleRelationResp (int64_t l_userid,const RoleBean& l_roleinfo = RoleBean(),const std::vector<FactionIDBean>& l_factions = std::vector<FactionIDBean>(),
			const std::vector<RoleGroupBean>& l_friends = std::vector<RoleGroupBean>(),const std::vector<RoleInfoBean>& l_blacklist = std::vector<RoleInfoBean>())
			 : userid(l_userid),roleinfo(l_roleinfo),factions(l_factions)
			,friends(l_friends),blacklist(l_blacklist)
		{
			type = PROTOCOL_ROLERELATIONRESP;
		}

		RoleRelationResp(const RoleRelationResp &rhs)
			: Protocol(rhs),userid(rhs.userid),roleinfo(rhs.roleinfo),factions(rhs.factions)
			,friends(rhs.friends),blacklist(rhs.blacklist) { }

		GNET::Protocol *Clone() const { return new RoleRelationResp(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << userid;
			os << roleinfo;
			os << factions;
			os << friends;
			os << blacklist;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> userid;
			os >> roleinfo;
			os >> factions;
			os >> friends;
			os >> blacklist;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 1048576; }
