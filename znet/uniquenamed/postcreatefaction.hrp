
#ifndef __GNET_POSTCREATEFACTION_HPP
#define __GNET_POSTCREATEFACTION_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "storage.h"
#include "postcreatefactionarg"
#include "postcreatefactionres"

#include "timer.h"
#include "uniquenameserver.hpp"
namespace GNET
{

class PostCreateFaction : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "postcreatefaction"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		PostCreateFactionArg *arg = (PostCreateFactionArg *)argument;
		PostCreateFactionRes *res = (PostCreateFactionRes *)result;

		Octets name;
		CharsetConverter::conv_charset_u2l( arg->factionname, name );
		LOG_TRACE( "PostCreateFaction(success=%d,zoneid=%d,factionid=%d,name=%.*s)",
			arg->success, arg->zoneid, arg->factionid, name.size(), (char*)name.begin() );

		UniqueNameServer::GetInstance()->TransformName(arg->factionname);

		try
		{
			StorageEnv::Storage * punamefaction = StorageEnv::GetStorage("unamefaction");
			StorageEnv::AtomTransaction txn;
			try
			{
				Marshal::OctetsStream key_nextid, value_unamefaction;
				int nextid_forkey = 0;
				key_nextid << nextid_forkey;
				if( key_nextid == arg->factionname )
				{
					res->retcode = ERR_DUPLICATRECORD;
					LOG_TRACE( "PostCreateFaction(success=%d,zoneid=%d,factionid=%d,name=%.*s), duplicate, equals to next_id", 
							arg->success, arg->zoneid, arg->factionid, name.size(), (char*)name.begin() );
					return;
				}

				int status = UNIQUENAME_USED;
				value_unamefaction << arg->zoneid << arg->factionid << status << (int)Timer::GetTime();
				if( arg->success )
					punamefaction->insert( arg->factionname, value_unamefaction, txn );
				else
					punamefaction->del( arg->factionname, txn );
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "PostCreateFaction, zoneid=%d, factionid=%d, what=%s\n", arg->zoneid, arg->factionid, e.what() );
			res->retcode = -1;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// PostCreateFactionArg *arg = (PostCreateFactionArg *)argument;
		// PostCreateFactionRes *res = (PostCreateFactionRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
