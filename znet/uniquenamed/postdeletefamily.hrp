
#ifndef __GNET_POSTDELETEFAMILY_HPP
#define __GNET_POSTDELETEFAMILY_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "storage.h"
#include "postdeletefamilyarg"
#include "postdeletefamilyres"

#include "timer.h"
#include "uniquenameserver.hpp"
namespace GNET
{

class PostDeleteFamily : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "postdeletefamily"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		PostDeleteFamilyArg *arg = (PostDeleteFamilyArg *)argument;
		PostDeleteFamilyRes *res = (PostDeleteFamilyRes *)result;
		
		/*
		UniqueNameServer::GetInstance()->TransformName(arg->familyname);
		Octets name;
		CharsetConverter::conv_charset_u2l( arg->familyname, name );
		*/
		LOG_TRACE( "PostDeleteFamily(zoneid=%d,familyid=%d,name_list.size=%d)",
				arg->zoneid, arg->familyid, arg->namelist.size());

		try
		{
			StorageEnv::Storage * punamefamily = StorageEnv::GetStorage("unamefamily");
			StorageEnv::AtomTransaction txn;
			try
			{
				Marshal::OctetsStream key_nextid;//, value_unamefamily;
				int nextid_forkey = 0;
				key_nextid << nextid_forkey;
				/*
				if( key_nextid == arg->familyname )
				{
					res->retcode = ERR_DUPLICATRECORD;
					LOG_TRACE( "PostDeleteFaction(zoneid=%d,factionid=%d,name=%.*s), duplicate, equals to next_id", 
							arg->zoneid, arg->familyid, name.size(), (char*)name.begin() );
					return;
				}
				*/
				std::vector<Octets>::iterator it, ite = arg->namelist.end();
				for (it = arg->namelist.begin(); it != ite; ++it)
				{
					UniqueNameServer::GetInstance()->TransformName(*it);
					if (*it != key_nextid)
						punamefamily->del(*it, txn );
				}
				//punamefamily->del( arg->familyname, txn );
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "PostDeleteFamily, zoneid=%d, familyid=%d, what=%s\n", arg->zoneid, arg->familyid, e.what() );
			res->retcode = -1;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// PostDeleteFamilynArg *arg = (PostDeleteFamilynArg *)argument;
		// PostDeleteFamilynRes *res = (PostDeleteFamilynRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
