
#ifndef __GNET_POSTCREATEROLE_HPP
#define __GNET_POSTCREATEROLE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "storage.h"
#include "postcreaterolearg"
#include "postcreateroleres"

#include "macros.h"
#include "timer.h"
#include "uniquenameserver.hpp"
namespace GNET
{

class PostCreateRole : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "postcreaterole"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		PostCreateRoleArg *arg = (PostCreateRoleArg *)argument;
		PostCreateRoleRes *res = (PostCreateRoleRes *)result;

		Octets name;
		CharsetConverter::conv_charset_u2l( arg->rolename, name );
		LOG_TRACE( "PostCreateRole(success=%d, zoneid=%d, roleid=%d, name=%.*s)",
			arg->success, arg->zoneid, arg->roleid, name.size(), (char*)name.begin() );

		UniqueNameServer::GetInstance()->TransformName(arg->rolename);

		try
		{
			StorageEnv::Storage * punamerole = StorageEnv::GetStorage("unamerole");
			StorageEnv::Storage * puidrole = StorageEnv::GetStorage("uidrole");
			StorageEnv::CommonTransaction txn;
			try
			{
				Marshal::OctetsStream key_userid, value_unamerole, value_uidrole;
				int status = UNIQUENAME_USED;
				value_unamerole << arg->zoneid << arg->roleid << status << (int)Timer::GetTime();
				if( arg->success )
				{
					punamerole->insert( arg->rolename, value_unamerole, txn );
				}
				else
				{
					punamerole->del( arg->rolename, txn );

					key_userid << arg->userid;
					if( puidrole->find( key_userid, value_uidrole, txn ) )
					{
						unsigned int roles, logicuid;
						value_uidrole >> roles >> logicuid;

						RoleList rolelist(roles);
						if( rolelist.DelRole( arg->roleid ) )
						{
							value_uidrole.clear();
							value_uidrole << rolelist.GetRoleList() << logicuid;
							puidrole->insert( key_userid, value_uidrole, txn );
						}
						LOG_TRACE( "PostCreateRole(success=%d,zoneid=%d,roleid=%d,name=%.*s), old rolelist=%x, new rolelist=%x", 
							arg->success,arg->zoneid,arg->roleid,name.size(),(char*)name.begin(),roles,rolelist.GetRoleList() );
					}
				}
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "PostCreateRole, zoneid=%d, roleid=%d, what=%s\n", arg->zoneid, arg->roleid, e.what() );
			res->retcode = -1;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// PostCreateRoleArg *arg = (PostCreateRoleArg *)argument;
		// PostCreateRoleRes *res = (PostCreateRoleRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
