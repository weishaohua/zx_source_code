
#ifndef __GNET_DBFAMILYGET_HPP
#define __GNET_DBFAMILYGET_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "gamedbclient.hpp"
#include "familyid"
#include "familygetres"
#include "gtmanager.h"
namespace GNET
{

class DBFamilyGet : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbfamilyget"
#undef	RPC_BASECLASS
	int factionid;
	int64_t localuid;
	int pt_type;
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// FamilyId *arg = (FamilyId *)argument;
		// FamilyGetRes *res = (FamilyGetRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		FamilyId *arg = (FamilyId *)argument;
		FamilyGetRes *res = (FamilyGetRes *)result;
		DEBUG_PRINT("DBFamilyGet: rpc return. retcode=%d,familyid=%d,factionid=%d localuid=%lld pt_type=%d", res->retcode, res->value.id, factionid,localuid,pt_type);
		if(res->retcode == ERR_SUCCESS)
		{
			if(GTManager::Instance()->OnDBFamilyGet(factionid,res->value,localuid,pt_type))
				DEBUG_PRINT("DBFamilyGet: OnDBFamilyGet error");
		}
		else
			GTManager::Instance()->OnDBFamilyGetErr(factionid,arg->fid,localuid,res->retcode,pt_type);
	}

	void OnTimeout()
	{
		FamilyId *arg = (FamilyId *)argument;
		DEBUG_PRINT("dbfamilyget: timeout. localuid=%lld,familyid=%d,factionid=%d,pt_type=%d", localuid,arg->fid,factionid,pt_type);
		DBFamilyGet * rpc=(DBFamilyGet*)Rpc::Call(RPC_DBFAMILYGET,arg);
		rpc->factionid =factionid;
		rpc->localuid = localuid;
		rpc->pt_type = pt_type;
		GameDBClient::GetInstance()->SendProtocol(rpc);

	}

};

};
#endif
