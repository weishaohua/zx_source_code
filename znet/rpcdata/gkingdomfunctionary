#ifndef __GNET_GKINGDOMFUNCTIONARY_RPCDATA
#define __GNET_GKINGDOMFUNCTIONARY_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GKingdomFunctionary : public GNET::Rpc::Data
	{
	public:
		int roleid;
		char title;
		Octets rolename;
		unsigned int privileges_mask;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GKingdomFunctionary (int l_roleid = 0,char l_title = 0,Octets l_rolename = Octets()
			,unsigned int l_privileges_mask = 0,int l_reserved2 = 0,int l_reserved3 = 0
			,int l_reserved4 = 0)
			: roleid(l_roleid),title(l_title),rolename(l_rolename)
			,privileges_mask(l_privileges_mask),reserved2(l_reserved2),reserved3(l_reserved3)
			,reserved4(l_reserved4)
		{
		}

		GKingdomFunctionary(const GKingdomFunctionary &rhs)
			: roleid(rhs.roleid),title(rhs.title),rolename(rhs.rolename),
			privileges_mask(rhs.privileges_mask),reserved2(rhs.reserved2),reserved3(rhs.reserved3),
			reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GKingdomFunctionary(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GKingdomFunctionary *r = dynamic_cast<const GKingdomFunctionary *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				title = r->title;
				rolename = r->rolename;
				privileges_mask = r->privileges_mask;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GKingdomFunctionary& operator = (const GKingdomFunctionary &rhs)
		{
			const GKingdomFunctionary *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				title = r->title;
				rolename = r->rolename;
				privileges_mask = r->privileges_mask;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << title;
			os << rolename;
			os << privileges_mask;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> title;
			os >> rolename;
			os >> privileges_mask;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
};
#endif
