#ifndef __GNET_GFARM_RPCDATA
#define __GNET_GFARM_RPCDATA

#include "rpcdefs.h"

#include "gfarmfield"

namespace GNET
{
	class GFarm : public GNET::Rpc::Data
	{
	public:
		Octets protect_period;
		Octets states;
		std::vector<GFarmField> fields;
		Octets cooldown;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;
		int reserved5;
		int reserved6;
		int reserved7;
		int reserved8;

	public:
		GFarm (Octets l_protect_period = Octets(),const Octets& l_states = Octets(),const std::vector<GFarmField>& l_fields = std::vector<GFarmField>()
			,const Octets& l_cooldown = Octets(),int l_reserved1 = 0,int l_reserved2 = 0
			,int l_reserved3 = 0,int l_reserved4 = 0,int l_reserved5 = 0
			,int l_reserved6 = 0,int l_reserved7 = 0,int l_reserved8 = 0)
			: protect_period(l_protect_period),states(l_states),fields(l_fields)
			,cooldown(l_cooldown),reserved1(l_reserved1),reserved2(l_reserved2)
			,reserved3(l_reserved3),reserved4(l_reserved4),reserved5(l_reserved5)
			,reserved6(l_reserved6),reserved7(l_reserved7),reserved8(l_reserved8)
		{
		}

		GFarm(const GFarm &rhs)
			: protect_period(rhs.protect_period),states(rhs.states),fields(rhs.fields),
			cooldown(rhs.cooldown),reserved1(rhs.reserved1),reserved2(rhs.reserved2),
			reserved3(rhs.reserved3),reserved4(rhs.reserved4),reserved5(rhs.reserved5),
			reserved6(rhs.reserved6),reserved7(rhs.reserved7),reserved8(rhs.reserved8) { }

		Rpc::Data *Clone() const { return new GFarm(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GFarm *r = dynamic_cast<const GFarm *>(&rhs);
			if (r && r != this)
			{
				protect_period = r->protect_period;
				states = r->states;
				fields = r->fields;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		GFarm& operator = (const GFarm &rhs)
		{
			const GFarm *r = &rhs;
			if (r && r != this)
			{
				protect_period = r->protect_period;
				states = r->states;
				fields = r->fields;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << protect_period;
			os << states;
			os << fields;
			os << cooldown;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			os << reserved5;
			os << reserved6;
			os << reserved7;
			os << reserved8;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> protect_period;
			os >> states;
			os >> fields;
			os >> cooldown;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			os >> reserved5;
			os >> reserved6;
			os >> reserved7;
			os >> reserved8;
			return os;
		}

	};
};
#endif
