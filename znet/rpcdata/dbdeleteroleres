#ifndef __GNET_DBDELETEROLERES_RPCDATA
#define __GNET_DBDELETEROLERES_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBDeleteRoleRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		int userid;
		unsigned int rolelist;
		unsigned int faction;
		unsigned int family;
		unsigned int circleid;
		std::vector<Octets> namelist;

	public:
		DBDeleteRoleRes (int l_retcode = -1,int l_userid = -1,unsigned int l_rolelist = 0
			,unsigned int l_faction = 0,unsigned int l_family = 0,unsigned int l_circleid = 0
			,const std::vector<Octets>& l_namelist = std::vector<Octets>())
			: retcode(l_retcode),userid(l_userid),rolelist(l_rolelist)
			,faction(l_faction),family(l_family),circleid(l_circleid)
			,namelist(l_namelist)
		{
		}

		DBDeleteRoleRes(const DBDeleteRoleRes &rhs)
			: retcode(rhs.retcode),userid(rhs.userid),rolelist(rhs.rolelist),
			faction(rhs.faction),family(rhs.family),circleid(rhs.circleid),
			namelist(rhs.namelist) { }

		Rpc::Data *Clone() const { return new DBDeleteRoleRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBDeleteRoleRes *r = dynamic_cast<const DBDeleteRoleRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				userid = r->userid;
				rolelist = r->rolelist;
				faction = r->faction;
				family = r->family;
				circleid = r->circleid;
				namelist = r->namelist;
			}
			return *this;
		}

		DBDeleteRoleRes& operator = (const DBDeleteRoleRes &rhs)
		{
			const DBDeleteRoleRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				userid = r->userid;
				rolelist = r->rolelist;
				faction = r->faction;
				family = r->family;
				circleid = r->circleid;
				namelist = r->namelist;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << userid;
			os << rolelist;
			os << faction;
			os << family;
			os << circleid;
			os << namelist;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> userid;
			os >> rolelist;
			os >> faction;
			os >> family;
			os >> circleid;
			os >> namelist;
			return os;
		}

	};
};
#endif
