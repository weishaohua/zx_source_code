#ifndef __GNET_GFACTIONAUCTION_RPCDATA
#define __GNET_GFACTIONAUCTION_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GFactionAuction : public GNET::Rpc::Data
	{
	public:
		int timestamp;
		int itemid;
		int winner;
		int cost;
		Octets rolename;
		int status;
		int end_time;
		int reserved1;
		int reserved2;

	public:
		GFactionAuction (int l_timestamp = 0,int l_itemid = 0,int l_winner = 0
			,int l_cost = 0,const Octets& l_rolename = Octets(),int l_status = 0
			,int l_end_time = 0,int l_reserved1 = 0,int l_reserved2 = 0)
			: timestamp(l_timestamp),itemid(l_itemid),winner(l_winner)
			,cost(l_cost),rolename(l_rolename),status(l_status)
			,end_time(l_end_time),reserved1(l_reserved1),reserved2(l_reserved2)
		{
		}

		GFactionAuction(const GFactionAuction &rhs)
			: timestamp(rhs.timestamp),itemid(rhs.itemid),winner(rhs.winner),
			cost(rhs.cost),rolename(rhs.rolename),status(rhs.status),
			end_time(rhs.end_time),reserved1(rhs.reserved1),reserved2(rhs.reserved2) { }

		Rpc::Data *Clone() const { return new GFactionAuction(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GFactionAuction *r = dynamic_cast<const GFactionAuction *>(&rhs);
			if (r && r != this)
			{
				timestamp = r->timestamp;
				itemid = r->itemid;
				winner = r->winner;
				cost = r->cost;
				rolename = r->rolename;
				status = r->status;
				end_time = r->end_time;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		GFactionAuction& operator = (const GFactionAuction &rhs)
		{
			const GFactionAuction *r = &rhs;
			if (r && r != this)
			{
				timestamp = r->timestamp;
				itemid = r->itemid;
				winner = r->winner;
				cost = r->cost;
				rolename = r->rolename;
				status = r->status;
				end_time = r->end_time;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << timestamp;
			os << itemid;
			os << winner;
			os << cost;
			os << rolename;
			os << status;
			os << end_time;
			os << reserved1;
			os << reserved2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> timestamp;
			os >> itemid;
			os >> winner;
			os >> cost;
			os >> rolename;
			os >> status;
			os >> end_time;
			os >> reserved1;
			os >> reserved2;
			return os;
		}

	};
	typedef GNET::RpcDataVector<GFactionAuction>	GFactionAuctionVector;
};
#endif
