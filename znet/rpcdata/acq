#ifndef __GNET_ACQ_RPCDATA
#define __GNET_ACQ_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class ACQ : public GNET::Rpc::Data
	{
	public:
		int query_type;
		int zoneid;
		int roleid;
		int xid;
		int timeout;

	public:
		ACQ ()
		{
		}

		ACQ(const ACQ &rhs)
			: query_type(rhs.query_type),zoneid(rhs.zoneid),roleid(rhs.roleid),
			xid(rhs.xid),timeout(rhs.timeout) { }

		Rpc::Data *Clone() const { return new ACQ(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const ACQ *r = dynamic_cast<const ACQ *>(&rhs);
			if (r && r != this)
			{
				query_type = r->query_type;
				zoneid = r->zoneid;
				roleid = r->roleid;
				xid = r->xid;
				timeout = r->timeout;
			}
			return *this;
		}

		ACQ& operator = (const ACQ &rhs)
		{
			const ACQ *r = &rhs;
			if (r && r != this)
			{
				query_type = r->query_type;
				zoneid = r->zoneid;
				roleid = r->roleid;
				xid = r->xid;
				timeout = r->timeout;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << query_type;
			os << zoneid;
			os << roleid;
			os << xid;
			os << timeout;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> query_type;
			os >> zoneid;
			os >> roleid;
			os >> xid;
			os >> timeout;
			return os;
		}

	};
};
#endif
