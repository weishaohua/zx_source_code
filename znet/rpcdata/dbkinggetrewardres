#ifndef __GNET_DBKINGGETREWARDRES_RPCDATA
#define __GNET_DBKINGGETREWARDRES_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBKingGetRewardRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		int roleid;
		int reward_mask;

	public:
		DBKingGetRewardRes (int l_retcode = 0,int l_roleid = 0,int l_reward_mask = 0)
			: retcode(l_retcode),roleid(l_roleid),reward_mask(l_reward_mask)
		{
		}

		DBKingGetRewardRes(const DBKingGetRewardRes &rhs)
			: retcode(rhs.retcode),roleid(rhs.roleid),reward_mask(rhs.reward_mask) { }

		Rpc::Data *Clone() const { return new DBKingGetRewardRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBKingGetRewardRes *r = dynamic_cast<const DBKingGetRewardRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				roleid = r->roleid;
				reward_mask = r->reward_mask;
			}
			return *this;
		}

		DBKingGetRewardRes& operator = (const DBKingGetRewardRes &rhs)
		{
			const DBKingGetRewardRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				roleid = r->roleid;
				reward_mask = r->reward_mask;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << roleid;
			os << reward_mask;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> roleid;
			os >> reward_mask;
			return os;
		}

	};
};
#endif
