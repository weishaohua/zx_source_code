#ifndef __GNET_GFARMFIELD_RPCDATA
#define __GNET_GFARMFIELD_RPCDATA

#include "rpcdefs.h"

#include "gfarmcrop"

namespace GNET
{
	class GFarmField : public GNET::Rpc::Data
	{
	public:
		int id;
		char type;
		int friend_id;
		Octets friend_name;
		Octets states;
		bool has_crop;
		GFarmCrop crop;
		Octets cooldown;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;
		int reserved5;
		int reserved6;
		int reserved7;
		int reserved8;

	public:
		GFarmField (int l_id = 0,char l_type = 0,int l_friend_id = 0
			,const Octets& l_friend_name = Octets(),const Octets& l_states = Octets(),bool l_has_crop = false
			,const GFarmCrop& l_crop = GFarmCrop(),const Octets& l_cooldown = Octets(),int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0
			,int l_reserved5 = 0,int l_reserved6 = 0,int l_reserved7 = 0
			,int l_reserved8 = 0)
			: id(l_id),type(l_type),friend_id(l_friend_id)
			,friend_name(l_friend_name),states(l_states),has_crop(l_has_crop)
			,crop(l_crop),cooldown(l_cooldown),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
			,reserved5(l_reserved5),reserved6(l_reserved6),reserved7(l_reserved7)
			,reserved8(l_reserved8)
		{
		}

		GFarmField(const GFarmField &rhs)
			: id(rhs.id),type(rhs.type),friend_id(rhs.friend_id),
			friend_name(rhs.friend_name),states(rhs.states),has_crop(rhs.has_crop),
			crop(rhs.crop),cooldown(rhs.cooldown),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2),reserved3(rhs.reserved3),reserved4(rhs.reserved4),
			reserved5(rhs.reserved5),reserved6(rhs.reserved6),reserved7(rhs.reserved7),
			reserved8(rhs.reserved8) { }

		Rpc::Data *Clone() const { return new GFarmField(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GFarmField *r = dynamic_cast<const GFarmField *>(&rhs);
			if (r && r != this)
			{
				id = r->id;
				type = r->type;
				friend_id = r->friend_id;
				friend_name = r->friend_name;
				states = r->states;
				has_crop = r->has_crop;
				crop = r->crop;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		GFarmField& operator = (const GFarmField &rhs)
		{
			const GFarmField *r = &rhs;
			if (r && r != this)
			{
				id = r->id;
				type = r->type;
				friend_id = r->friend_id;
				friend_name = r->friend_name;
				states = r->states;
				has_crop = r->has_crop;
				crop = r->crop;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << id;
			os << type;
			os << friend_id;
			os << friend_name;
			os << states;
			os << has_crop;
			os << crop;
			os << cooldown;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			os << reserved5;
			os << reserved6;
			os << reserved7;
			os << reserved8;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> id;
			os >> type;
			os >> friend_id;
			os >> friend_name;
			os >> states;
			os >> has_crop;
			os >> crop;
			os >> cooldown;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			os >> reserved5;
			os >> reserved6;
			os >> reserved7;
			os >> reserved8;
			return os;
		}

	};
};
#endif
