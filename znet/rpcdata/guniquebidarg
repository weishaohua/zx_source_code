#ifndef __GNET_GUNIQUEBIDARG_RPCDATA
#define __GNET_GUNIQUEBIDARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GUniqueBidArg : public GNET::Rpc::Data
	{
	public:
		int roleid;
		int lower_bound_money;
		int upper_bound_money;

	public:
		GUniqueBidArg (int l_lower_bound_money = 0,int l_upper_bound_money = 0)
			: lower_bound_money(l_lower_bound_money),upper_bound_money(l_upper_bound_money)
		{
		}

		GUniqueBidArg(const GUniqueBidArg &rhs)
			: roleid(rhs.roleid),lower_bound_money(rhs.lower_bound_money),upper_bound_money(rhs.upper_bound_money) { }

		Rpc::Data *Clone() const { return new GUniqueBidArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GUniqueBidArg *r = dynamic_cast<const GUniqueBidArg *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				lower_bound_money = r->lower_bound_money;
				upper_bound_money = r->upper_bound_money;
			}
			return *this;
		}

		GUniqueBidArg& operator = (const GUniqueBidArg &rhs)
		{
			const GUniqueBidArg *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				lower_bound_money = r->lower_bound_money;
				upper_bound_money = r->upper_bound_money;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << lower_bound_money;
			os << upper_bound_money;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> lower_bound_money;
			os >> upper_bound_money;
			return os;
		}

	};
};
#endif
