#ifndef __GNET_GLOBALCOUNTERINFO_RPCDATA
#define __GNET_GLOBALCOUNTERINFO_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GlobalCounterInfo : public GNET::Rpc::Data
	{
	public:
		int itemid;
		int template_id;
		int start_time;
		int duration;
		int max_count;
		int speak_interval;

	public:
		GlobalCounterInfo (int l_itemid = -1,int l_template_id = -1,int l_start_time = -1
			,int l_duration = 0,int l_max_count = 0,int l_speak_interval = -1)
			: itemid(l_itemid),template_id(l_template_id),start_time(l_start_time)
			,duration(l_duration),max_count(l_max_count),speak_interval(l_speak_interval)
		{
		}

		GlobalCounterInfo(const GlobalCounterInfo &rhs)
			: itemid(rhs.itemid),template_id(rhs.template_id),start_time(rhs.start_time),
			duration(rhs.duration),max_count(rhs.max_count),speak_interval(rhs.speak_interval) { }

		Rpc::Data *Clone() const { return new GlobalCounterInfo(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GlobalCounterInfo *r = dynamic_cast<const GlobalCounterInfo *>(&rhs);
			if (r && r != this)
			{
				itemid = r->itemid;
				template_id = r->template_id;
				start_time = r->start_time;
				duration = r->duration;
				max_count = r->max_count;
				speak_interval = r->speak_interval;
			}
			return *this;
		}

		GlobalCounterInfo& operator = (const GlobalCounterInfo &rhs)
		{
			const GlobalCounterInfo *r = &rhs;
			if (r && r != this)
			{
				itemid = r->itemid;
				template_id = r->template_id;
				start_time = r->start_time;
				duration = r->duration;
				max_count = r->max_count;
				speak_interval = r->speak_interval;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << itemid;
			os << template_id;
			os << start_time;
			os << duration;
			os << max_count;
			os << speak_interval;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> itemid;
			os >> template_id;
			os >> start_time;
			os >> duration;
			os >> max_count;
			os >> speak_interval;
			return os;
		}

	};
};
#endif
