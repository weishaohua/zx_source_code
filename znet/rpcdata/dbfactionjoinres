#ifndef __GNET_DBFACTIONJOINRES_RPCDATA
#define __GNET_DBFACTIONJOINRES_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBFactionJoinRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		Octets name;

	public:
		DBFactionJoinRes (int l_retcode = -1,const Octets& l_name = Octets(0))
			: retcode(l_retcode),name(l_name)
		{
		}

		DBFactionJoinRes(const DBFactionJoinRes &rhs)
			: retcode(rhs.retcode),name(rhs.name) { }

		Rpc::Data *Clone() const { return new DBFactionJoinRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBFactionJoinRes *r = dynamic_cast<const DBFactionJoinRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				name = r->name;
			}
			return *this;
		}

		DBFactionJoinRes& operator = (const DBFactionJoinRes &rhs)
		{
			const DBFactionJoinRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				name = r->name;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << name;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> name;
			return os;
		}

	};
};
#endif
