#ifndef __GNET_GSERVICEFORBIDCMDLIST_RPCDATA
#define __GNET_GSERVICEFORBIDCMDLIST_RPCDATA

#include "rpcdefs.h"

#include "serviceforbidcmd"

namespace GNET
{
	class GServiceForbidCmdList : public GNET::Rpc::Data
	{
	public:
		int version;
		std::vector<ServiceForbidCmd> cmdlist;
		int reserved1;
		int reserved2;

	public:
		GServiceForbidCmdList (int l_version = 0,const std::vector<ServiceForbidCmd>& l_cmdlist = std::vector<ServiceForbidCmd>(),int l_reserved1 = 0
			,int l_reserved2 = 0)
			: version(l_version),cmdlist(l_cmdlist),reserved1(l_reserved1)
			,reserved2(l_reserved2)
		{
		}

		GServiceForbidCmdList(const GServiceForbidCmdList &rhs)
			: version(rhs.version),cmdlist(rhs.cmdlist),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2) { }

		Rpc::Data *Clone() const { return new GServiceForbidCmdList(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GServiceForbidCmdList *r = dynamic_cast<const GServiceForbidCmdList *>(&rhs);
			if (r && r != this)
			{
				version = r->version;
				cmdlist = r->cmdlist;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		GServiceForbidCmdList& operator = (const GServiceForbidCmdList &rhs)
		{
			const GServiceForbidCmdList *r = &rhs;
			if (r && r != this)
			{
				version = r->version;
				cmdlist = r->cmdlist;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << version;
			os << cmdlist;
			os << reserved1;
			os << reserved2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> version;
			os >> cmdlist;
			os >> reserved1;
			os >> reserved2;
			return os;
		}

	};
};
#endif
