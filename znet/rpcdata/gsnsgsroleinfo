#ifndef __GNET_GSNSGSROLEINFO_RPCDATA
#define __GNET_GSNSGSROLEINFO_RPCDATA

#include "rpcdefs.h"

#include "gtitleinfo"
#include "gdeityinfo"
#include "grolebasicattribute"
#include "gpetaddedinfo"
#include "gskillinfo"
#include "gsnsrolebasicext"

namespace GNET
{
	class GSNSGsRoleInfo : public GNET::Rpc::Data
	{
	public:
		GTitleInfo title;
		GDeityInfo deityinfo;
		GRoleBasicAttribute rolebasicinfo;
		GPetAddedInfoVector pet_addinfo;
		GSkillInfo skillinfo;
		GSNSRoleBasicExt basic_ext;

	public:
		GSNSGsRoleInfo (const GSkillInfo& l_skillinfo = GSkillInfo())
			: skillinfo(l_skillinfo)
		{
		}

		GSNSGsRoleInfo(const GSNSGsRoleInfo &rhs)
			: title(rhs.title),deityinfo(rhs.deityinfo),rolebasicinfo(rhs.rolebasicinfo),
			pet_addinfo(rhs.pet_addinfo),skillinfo(rhs.skillinfo),basic_ext(rhs.basic_ext) { }

		Rpc::Data *Clone() const { return new GSNSGsRoleInfo(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GSNSGsRoleInfo *r = dynamic_cast<const GSNSGsRoleInfo *>(&rhs);
			if (r && r != this)
			{
				title = r->title;
				deityinfo = r->deityinfo;
				rolebasicinfo = r->rolebasicinfo;
				pet_addinfo = r->pet_addinfo;
				skillinfo = r->skillinfo;
				basic_ext = r->basic_ext;
			}
			return *this;
		}

		GSNSGsRoleInfo& operator = (const GSNSGsRoleInfo &rhs)
		{
			const GSNSGsRoleInfo *r = &rhs;
			if (r && r != this)
			{
				title = r->title;
				deityinfo = r->deityinfo;
				rolebasicinfo = r->rolebasicinfo;
				pet_addinfo = r->pet_addinfo;
				skillinfo = r->skillinfo;
				basic_ext = r->basic_ext;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << title;
			os << deityinfo;
			os << rolebasicinfo;
			os << pet_addinfo;
			os << skillinfo;
			os << basic_ext;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> title;
			os >> deityinfo;
			os >> rolebasicinfo;
			os >> pet_addinfo;
			os >> skillinfo;
			os >> basic_ext;
			return os;
		}

	};
};
#endif
