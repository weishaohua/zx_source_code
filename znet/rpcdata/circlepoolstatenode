#ifndef __GNET_CIRCLEPOOLSTATENODE_RPCDATA
#define __GNET_CIRCLEPOOLSTATENODE_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class CirclePoolStateNode : public GNET::Rpc::Data
	{
	public:
		unsigned char racegrade;
		unsigned int cur_id;
		unsigned int cur_name;

	public:
		CirclePoolStateNode (unsigned char l_racegrade = 0,unsigned int l_cur_id = 0,unsigned int l_cur_name = 0)
			: racegrade(l_racegrade),cur_id(l_cur_id),cur_name(l_cur_name)
		{
		}

		CirclePoolStateNode(const CirclePoolStateNode &rhs)
			: racegrade(rhs.racegrade),cur_id(rhs.cur_id),cur_name(rhs.cur_name) { }

		Rpc::Data *Clone() const { return new CirclePoolStateNode(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const CirclePoolStateNode *r = dynamic_cast<const CirclePoolStateNode *>(&rhs);
			if (r && r != this)
			{
				racegrade = r->racegrade;
				cur_id = r->cur_id;
				cur_name = r->cur_name;
			}
			return *this;
		}

		CirclePoolStateNode& operator = (const CirclePoolStateNode &rhs)
		{
			const CirclePoolStateNode *r = &rhs;
			if (r && r != this)
			{
				racegrade = r->racegrade;
				cur_id = r->cur_id;
				cur_name = r->cur_name;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << racegrade;
			os << cur_id;
			os << cur_name;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> racegrade;
			os >> cur_id;
			os >> cur_name;
			return os;
		}

	};
};
#endif
