#ifndef __GNET_DBFUNGAMEPUTSCOREARG_RPCDATA
#define __GNET_DBFUNGAMEPUTSCOREARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBFunGamePutScoreArg : public GNET::Rpc::Data
	{
	public:
		int roleid;
		int gametype;
		Octets fungame_score;

	public:
		DBFunGamePutScoreArg (int l_roleid = 0,int l_gametype = 0,const Octets& l_fungame_score = Octets())
			: roleid(l_roleid),gametype(l_gametype),fungame_score(l_fungame_score)
		{
		}

		DBFunGamePutScoreArg(const DBFunGamePutScoreArg &rhs)
			: roleid(rhs.roleid),gametype(rhs.gametype),fungame_score(rhs.fungame_score) { }

		Rpc::Data *Clone() const { return new DBFunGamePutScoreArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBFunGamePutScoreArg *r = dynamic_cast<const DBFunGamePutScoreArg *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				gametype = r->gametype;
				fungame_score = r->fungame_score;
			}
			return *this;
		}

		DBFunGamePutScoreArg& operator = (const DBFunGamePutScoreArg &rhs)
		{
			const DBFunGamePutScoreArg *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				gametype = r->gametype;
				fungame_score = r->fungame_score;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << gametype;
			os << fungame_score;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> gametype;
			os >> fungame_score;
			return os;
		}

	};
};
#endif
