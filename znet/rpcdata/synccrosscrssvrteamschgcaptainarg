#ifndef __GNET_SYNCCROSSCRSSVRTEAMSCHGCAPTAINARG_RPCDATA
#define __GNET_SYNCCROSSCRSSVRTEAMSCHGCAPTAINARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class SyncCrossCrssvrTeamsChgCaptainArg : public GNET::Rpc::Data
	{
	public:
		int zoneid;
		int teamid;
		int caption_roleid;

	public:
		SyncCrossCrssvrTeamsChgCaptainArg (int l_zoneid = -1,int l_teamid = -1,int l_caption_roleid = -1)
			: zoneid(l_zoneid),teamid(l_teamid),caption_roleid(l_caption_roleid)
		{
		}

		SyncCrossCrssvrTeamsChgCaptainArg(const SyncCrossCrssvrTeamsChgCaptainArg &rhs)
			: zoneid(rhs.zoneid),teamid(rhs.teamid),caption_roleid(rhs.caption_roleid) { }

		Rpc::Data *Clone() const { return new SyncCrossCrssvrTeamsChgCaptainArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const SyncCrossCrssvrTeamsChgCaptainArg *r = dynamic_cast<const SyncCrossCrssvrTeamsChgCaptainArg *>(&rhs);
			if (r && r != this)
			{
				zoneid = r->zoneid;
				teamid = r->teamid;
				caption_roleid = r->caption_roleid;
			}
			return *this;
		}

		SyncCrossCrssvrTeamsChgCaptainArg& operator = (const SyncCrossCrssvrTeamsChgCaptainArg &rhs)
		{
			const SyncCrossCrssvrTeamsChgCaptainArg *r = &rhs;
			if (r && r != this)
			{
				zoneid = r->zoneid;
				teamid = r->teamid;
				caption_roleid = r->caption_roleid;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << zoneid;
			os << teamid;
			os << caption_roleid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> zoneid;
			os >> teamid;
			os >> caption_roleid;
			return os;
		}

	};
};
#endif
