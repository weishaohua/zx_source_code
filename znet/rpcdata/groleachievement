#ifndef __GNET_GROLEACHIEVEMENT_RPCDATA
#define __GNET_GROLEACHIEVEMENT_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GRoleAchievement : public GNET::Rpc::Data
	{
	public:
		int version;
		Octets achieve_map;
		Octets achieve_active;
		Octets achieve_spec_info;
		Octets achieve_award_map;
		char reserved4;
		short reserved1;
		int reserved2;
		int reserved3;

	public:
		GRoleAchievement (int l_version = 0,char l_reserved4 = 0,short l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0)
			: version(l_version),reserved4(l_reserved4),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3)
		{
		}

		GRoleAchievement(const GRoleAchievement &rhs)
			: version(rhs.version),achieve_map(rhs.achieve_map),achieve_active(rhs.achieve_active),
			achieve_spec_info(rhs.achieve_spec_info),achieve_award_map(rhs.achieve_award_map),reserved4(rhs.reserved4),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2),reserved3(rhs.reserved3) { }

		Rpc::Data *Clone() const { return new GRoleAchievement(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GRoleAchievement *r = dynamic_cast<const GRoleAchievement *>(&rhs);
			if (r && r != this)
			{
				version = r->version;
				achieve_map = r->achieve_map;
				achieve_active = r->achieve_active;
				achieve_spec_info = r->achieve_spec_info;
				achieve_award_map = r->achieve_award_map;
				reserved4 = r->reserved4;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		GRoleAchievement& operator = (const GRoleAchievement &rhs)
		{
			const GRoleAchievement *r = &rhs;
			if (r && r != this)
			{
				version = r->version;
				achieve_map = r->achieve_map;
				achieve_active = r->achieve_active;
				achieve_spec_info = r->achieve_spec_info;
				achieve_award_map = r->achieve_award_map;
				reserved4 = r->reserved4;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << version;
			os << achieve_map;
			os << achieve_active;
			os << achieve_spec_info;
			os << achieve_award_map;
			os << reserved4;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> version;
			os >> achieve_map;
			os >> achieve_active;
			os >> achieve_spec_info;
			os >> achieve_award_map;
			os >> reserved4;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			return os;
		}

	};
};
#endif
