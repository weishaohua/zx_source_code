#ifndef __GNET_DBCROSSCRSSVRTEAMSRENAMEARG_RPCDATA
#define __GNET_DBCROSSCRSSVRTEAMSRENAMEARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBCrossCrssvrTeamsRenameArg : public GNET::Rpc::Data
	{
	public:
		int zoneid;
		int teamid;
		Octets oldname;
		Octets newname;
		int createtime;

	public:
		DBCrossCrssvrTeamsRenameArg (int l_zoneid = -1,int l_teamid = -1,const Octets& l_oldname = Octets(0)
			,const Octets& l_newname = Octets(0),int l_createtime = 0)
			: zoneid(l_zoneid),teamid(l_teamid),oldname(l_oldname)
			,newname(l_newname),createtime(l_createtime)
		{
		}

		DBCrossCrssvrTeamsRenameArg(const DBCrossCrssvrTeamsRenameArg &rhs)
			: zoneid(rhs.zoneid),teamid(rhs.teamid),oldname(rhs.oldname),
			newname(rhs.newname),createtime(rhs.createtime) { }

		Rpc::Data *Clone() const { return new DBCrossCrssvrTeamsRenameArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBCrossCrssvrTeamsRenameArg *r = dynamic_cast<const DBCrossCrssvrTeamsRenameArg *>(&rhs);
			if (r && r != this)
			{
				zoneid = r->zoneid;
				teamid = r->teamid;
				oldname = r->oldname;
				newname = r->newname;
				createtime = r->createtime;
			}
			return *this;
		}

		DBCrossCrssvrTeamsRenameArg& operator = (const DBCrossCrssvrTeamsRenameArg &rhs)
		{
			const DBCrossCrssvrTeamsRenameArg *r = &rhs;
			if (r && r != this)
			{
				zoneid = r->zoneid;
				teamid = r->teamid;
				oldname = r->oldname;
				newname = r->newname;
				createtime = r->createtime;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << zoneid;
			os << teamid;
			os << oldname;
			os << newname;
			os << createtime;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> zoneid;
			os >> teamid;
			os >> oldname;
			os >> newname;
			os >> createtime;
			return os;
		}

	};
};
#endif
