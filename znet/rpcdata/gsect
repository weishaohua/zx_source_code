#ifndef __GNET_GSECT_RPCDATA
#define __GNET_GSECT_RPCDATA

#include "rpcdefs.h"

#include "gdisciple"
#include "gsectskill"

namespace GNET
{
	class GSect : public GNET::Rpc::Data
	{
	public:
		Octets name;
		std::vector<GDisciple> disciples;
		std::vector<GSectSkill> skills;
		unsigned int reputation;
		unsigned int cooldown;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GSect (const Octets& l_name = Octets(0),const std::vector<GDisciple>& l_disciples = std::vector<GDisciple>(),const std::vector<GSectSkill>& l_skills = std::vector<GSectSkill>()
			,unsigned int l_reputation = 0,unsigned int l_cooldown = 0,int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0)
			: name(l_name),disciples(l_disciples),skills(l_skills)
			,reputation(l_reputation),cooldown(l_cooldown),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
		{
		}

		GSect(const GSect &rhs)
			: name(rhs.name),disciples(rhs.disciples),skills(rhs.skills),
			reputation(rhs.reputation),cooldown(rhs.cooldown),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2),reserved3(rhs.reserved3),reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GSect(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GSect *r = dynamic_cast<const GSect *>(&rhs);
			if (r && r != this)
			{
				name = r->name;
				disciples = r->disciples;
				skills = r->skills;
				reputation = r->reputation;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GSect& operator = (const GSect &rhs)
		{
			const GSect *r = &rhs;
			if (r && r != this)
			{
				name = r->name;
				disciples = r->disciples;
				skills = r->skills;
				reputation = r->reputation;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << name;
			os << disciples;
			os << skills;
			os << reputation;
			os << cooldown;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> name;
			os >> disciples;
			os >> skills;
			os >> reputation;
			os >> cooldown;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
	typedef GNET::RpcDataVector<GSect>	GSectVector;
};
#endif
