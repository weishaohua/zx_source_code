#ifndef __GNET_POSTCHANGEROLENAMEARG_RPCDATA
#define __GNET_POSTCHANGEROLENAMEARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class PostChangeRolenameArg : public GNET::Rpc::Data
	{
	public:
		char success;
		int zoneid;
		int roleid;
		Octets newname;
		Octets oldname;

	public:
		PostChangeRolenameArg (char l_success = 1,int l_zoneid = -1,int l_roleid = -1
			,const Octets& l_newname = Octets(0),const Octets& l_oldname = Octets(0))
			: success(l_success),zoneid(l_zoneid),roleid(l_roleid)
			,newname(l_newname),oldname(l_oldname)
		{
		}

		PostChangeRolenameArg(const PostChangeRolenameArg &rhs)
			: success(rhs.success),zoneid(rhs.zoneid),roleid(rhs.roleid),
			newname(rhs.newname),oldname(rhs.oldname) { }

		Rpc::Data *Clone() const { return new PostChangeRolenameArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const PostChangeRolenameArg *r = dynamic_cast<const PostChangeRolenameArg *>(&rhs);
			if (r && r != this)
			{
				success = r->success;
				zoneid = r->zoneid;
				roleid = r->roleid;
				newname = r->newname;
				oldname = r->oldname;
			}
			return *this;
		}

		PostChangeRolenameArg& operator = (const PostChangeRolenameArg &rhs)
		{
			const PostChangeRolenameArg *r = &rhs;
			if (r && r != this)
			{
				success = r->success;
				zoneid = r->zoneid;
				roleid = r->roleid;
				newname = r->newname;
				oldname = r->oldname;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << success;
			os << zoneid;
			os << roleid;
			os << newname;
			os << oldname;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> success;
			os >> zoneid;
			os >> roleid;
			os >> newname;
			os >> oldname;
			return os;
		}

	};
};
#endif
