#ifndef __GNET_GROLEBASE_RPCDATA
#define __GNET_GROLEBASE_RPCDATA

#include "rpcdefs.h"

#include "groleforbid"

namespace GNET
{
	class GRoleBase : public GNET::Rpc::Data
	{
	public:
		unsigned char version;
		unsigned int id;
		Octets name;
		unsigned char faceid;
		unsigned char hairid;
		unsigned char gender;
		unsigned char status;
		int delete_time;
		int create_time;
		int lastlogin_time;
		unsigned int familyid;
		unsigned char title;
		Octets config_data;
		Octets help_states;
		GRoleForbidVector forbid;
		unsigned int spouse;
		int jointime;
		int userid;
		int sectid;
		short initiallevel;
		unsigned char earid;
		unsigned char tailid;
		Octets circletrack;
		unsigned char fashionid;
		std::map<int, int> datagroup;
		char reserved3;

	public:
		GRoleBase (unsigned char l_version = 1,unsigned int l_id = 0,const Octets& l_name = Octets(0)
			,unsigned char l_faceid = 0,unsigned char l_hairid = 0,unsigned char l_gender = 0
			,unsigned char l_status = 0,int l_delete_time = 0,int l_create_time = 0
			,int l_lastlogin_time = 0,unsigned int l_familyid = 0,unsigned char l_title = 0
			,Octets l_config_data = Octets(0),Octets l_help_states = Octets(0),unsigned int l_spouse = 0
			,int l_jointime = 0,int l_userid = 0,int l_sectid = 0
			,short l_initiallevel = 0,unsigned char l_earid = 0,unsigned char l_tailid = 0
			,const Octets& l_circletrack = Octets(0),unsigned char l_fashionid = 0,char l_reserved3 = 0)
			: version(l_version),id(l_id),name(l_name)
			,faceid(l_faceid),hairid(l_hairid),gender(l_gender)
			,status(l_status),delete_time(l_delete_time),create_time(l_create_time)
			,lastlogin_time(l_lastlogin_time),familyid(l_familyid),title(l_title)
			,config_data(l_config_data),help_states(l_help_states),spouse(l_spouse)
			,jointime(l_jointime),userid(l_userid),sectid(l_sectid)
			,initiallevel(l_initiallevel),earid(l_earid),tailid(l_tailid)
			,circletrack(l_circletrack),fashionid(l_fashionid),reserved3(l_reserved3)
		{
		}

		GRoleBase(const GRoleBase &rhs)
			: version(rhs.version),id(rhs.id),name(rhs.name),
			faceid(rhs.faceid),hairid(rhs.hairid),gender(rhs.gender),
			status(rhs.status),delete_time(rhs.delete_time),create_time(rhs.create_time),
			lastlogin_time(rhs.lastlogin_time),familyid(rhs.familyid),title(rhs.title),
			config_data(rhs.config_data),help_states(rhs.help_states),forbid(rhs.forbid),
			spouse(rhs.spouse),jointime(rhs.jointime),userid(rhs.userid),
			sectid(rhs.sectid),initiallevel(rhs.initiallevel),earid(rhs.earid),
			tailid(rhs.tailid),circletrack(rhs.circletrack),fashionid(rhs.fashionid),
			datagroup(rhs.datagroup),reserved3(rhs.reserved3) { }

		Rpc::Data *Clone() const { return new GRoleBase(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GRoleBase *r = dynamic_cast<const GRoleBase *>(&rhs);
			if (r && r != this)
			{
				version = r->version;
				id = r->id;
				name = r->name;
				faceid = r->faceid;
				hairid = r->hairid;
				gender = r->gender;
				status = r->status;
				delete_time = r->delete_time;
				create_time = r->create_time;
				lastlogin_time = r->lastlogin_time;
				familyid = r->familyid;
				title = r->title;
				config_data = r->config_data;
				help_states = r->help_states;
				forbid = r->forbid;
				spouse = r->spouse;
				jointime = r->jointime;
				userid = r->userid;
				sectid = r->sectid;
				initiallevel = r->initiallevel;
				earid = r->earid;
				tailid = r->tailid;
				circletrack = r->circletrack;
				fashionid = r->fashionid;
				datagroup = r->datagroup;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		GRoleBase& operator = (const GRoleBase &rhs)
		{
			const GRoleBase *r = &rhs;
			if (r && r != this)
			{
				version = r->version;
				id = r->id;
				name = r->name;
				faceid = r->faceid;
				hairid = r->hairid;
				gender = r->gender;
				status = r->status;
				delete_time = r->delete_time;
				create_time = r->create_time;
				lastlogin_time = r->lastlogin_time;
				familyid = r->familyid;
				title = r->title;
				config_data = r->config_data;
				help_states = r->help_states;
				forbid = r->forbid;
				spouse = r->spouse;
				jointime = r->jointime;
				userid = r->userid;
				sectid = r->sectid;
				initiallevel = r->initiallevel;
				earid = r->earid;
				tailid = r->tailid;
				circletrack = r->circletrack;
				fashionid = r->fashionid;
				datagroup = r->datagroup;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << (unsigned char)(1);
			os << id;
			os << name;
			os << faceid;
			os << hairid;
			os << gender;
			os << status;
			os << delete_time;
			os << create_time;
			os << lastlogin_time;
			os << familyid;
			os << title;
			os << config_data;
			os << help_states;
			os << forbid;
			os << spouse;
			os << jointime;
			os << userid;
			os << sectid;
			os << initiallevel;
			os << earid;
			os << tailid;
			os << circletrack;
			os << fashionid;
			os << datagroup;
			os << reserved3;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> version;
			os >> id;
			os >> name;
			os >> faceid;
			os >> hairid;
			os >> gender;
			os >> status;
			os >> delete_time;
			os >> create_time;
			os >> lastlogin_time;
			os >> familyid;
			os >> title;
			os >> config_data;
			os >> help_states;
			os >> forbid;
			os >> spouse;
			os >> jointime;
			os >> userid;
			os >> sectid;
			os >> initiallevel;
			os >> earid;
			os >> tailid;
			os >> circletrack;
			os >> fashionid;
			os >> datagroup;
			os >> reserved3;
			return os;
		}

	};
};
#endif
