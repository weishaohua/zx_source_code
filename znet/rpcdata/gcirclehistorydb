#ifndef __GNET_GCIRCLEHISTORYDB_RPCDATA
#define __GNET_GCIRCLEHISTORYDB_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GCircleHistoryDB : public GNET::Rpc::Data
	{
	public:
		unsigned int circleid;
		unsigned int circlename;
		unsigned char titlemask;
		int jointime;
		int graduate_time;
		unsigned char circlegrade;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GCircleHistoryDB (unsigned int l_circleid = 0,unsigned int l_circlename = 0,unsigned char l_titlemask = 0
			,int l_jointime = 0,int l_graduate_time = 0,unsigned char l_circlegrade = 0
			,int l_reserved1 = 0,int l_reserved2 = 0,int l_reserved3 = 0
			,int l_reserved4 = 0)
			: circleid(l_circleid),circlename(l_circlename),titlemask(l_titlemask)
			,jointime(l_jointime),graduate_time(l_graduate_time),circlegrade(l_circlegrade)
			,reserved1(l_reserved1),reserved2(l_reserved2),reserved3(l_reserved3)
			,reserved4(l_reserved4)
		{
		}

		GCircleHistoryDB(const GCircleHistoryDB &rhs)
			: circleid(rhs.circleid),circlename(rhs.circlename),titlemask(rhs.titlemask),
			jointime(rhs.jointime),graduate_time(rhs.graduate_time),circlegrade(rhs.circlegrade),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2),reserved3(rhs.reserved3),
			reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GCircleHistoryDB(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GCircleHistoryDB *r = dynamic_cast<const GCircleHistoryDB *>(&rhs);
			if (r && r != this)
			{
				circleid = r->circleid;
				circlename = r->circlename;
				titlemask = r->titlemask;
				jointime = r->jointime;
				graduate_time = r->graduate_time;
				circlegrade = r->circlegrade;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GCircleHistoryDB& operator = (const GCircleHistoryDB &rhs)
		{
			const GCircleHistoryDB *r = &rhs;
			if (r && r != this)
			{
				circleid = r->circleid;
				circlename = r->circlename;
				titlemask = r->titlemask;
				jointime = r->jointime;
				graduate_time = r->graduate_time;
				circlegrade = r->circlegrade;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << circleid;
			os << circlename;
			os << titlemask;
			os << jointime;
			os << graduate_time;
			os << circlegrade;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> circleid;
			os >> circlename;
			os >> titlemask;
			os >> jointime;
			os >> graduate_time;
			os >> circlegrade;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
};
#endif
