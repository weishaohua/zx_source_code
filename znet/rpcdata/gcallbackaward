#ifndef __GNET_GCALLBACKAWARD_RPCDATA
#define __GNET_GCALLBACKAWARD_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GCallbackAward : public GNET::Rpc::Data
	{
	public:
		std::vector<int> returnplayer_list;
		std::vector<int> recaller_list;
		unsigned int returnaward_num;
		int reserved1;
		int reserved2;

	public:
		GCallbackAward (unsigned int l_returnaward_num = 0,int l_reserved1 = 0,int l_reserved2 = 0)
			: returnaward_num(l_returnaward_num),reserved1(l_reserved1),reserved2(l_reserved2)
		{
		}

		GCallbackAward(const GCallbackAward &rhs)
			: returnplayer_list(rhs.returnplayer_list),recaller_list(rhs.recaller_list),returnaward_num(rhs.returnaward_num),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2) { }

		Rpc::Data *Clone() const { return new GCallbackAward(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GCallbackAward *r = dynamic_cast<const GCallbackAward *>(&rhs);
			if (r && r != this)
			{
				returnplayer_list = r->returnplayer_list;
				recaller_list = r->recaller_list;
				returnaward_num = r->returnaward_num;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		GCallbackAward& operator = (const GCallbackAward &rhs)
		{
			const GCallbackAward *r = &rhs;
			if (r && r != this)
			{
				returnplayer_list = r->returnplayer_list;
				recaller_list = r->recaller_list;
				returnaward_num = r->returnaward_num;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << returnplayer_list;
			os << recaller_list;
			os << returnaward_num;
			os << reserved1;
			os << reserved2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> returnplayer_list;
			os >> recaller_list;
			os >> returnaward_num;
			os >> reserved1;
			os >> reserved2;
			return os;
		}

	};
};
#endif
