#ifndef __GNET_DBCONSIGNPREPOSTROLEARG_RPCDATA
#define __GNET_DBCONSIGNPREPOSTROLEARG_RPCDATA

#include "rpcdefs.h"

#include "gconsigngsroleinfo"

namespace GNET
{
	class DBConsignPrePostRoleArg : public GNET::Rpc::Data
	{
	public:
		int roleid;
		int userid;
		Octets seller_name;
		int margin;
		unsigned int token_item_id;
		int token_item_cnt;
		int token_item_idx;
		unsigned int price;
		unsigned int shelf_period;
		Octets sell_to_rolename;
		unsigned char consign_type;
		int loginip;
		int category;
		GConsignGsRoleInfo roleinfo;

	public:
		DBConsignPrePostRoleArg (int l_roleid = 0,int l_userid = 0,const Octets& l_seller_name = Octets()
			,int l_margin = 0,unsigned int l_token_item_id = 0,int l_token_item_cnt = 0
			,int l_token_item_idx = 0,unsigned int l_price = 0,unsigned int l_shelf_period = 0
			,const Octets& l_sell_to_rolename = Octets(),unsigned char l_consign_type = 0,int l_loginip = 0
			,int l_category = 0,const GConsignGsRoleInfo& l_roleinfo = GConsignGsRoleInfo())
			: roleid(l_roleid),userid(l_userid),seller_name(l_seller_name)
			,margin(l_margin),token_item_id(l_token_item_id),token_item_cnt(l_token_item_cnt)
			,token_item_idx(l_token_item_idx),price(l_price),shelf_period(l_shelf_period)
			,sell_to_rolename(l_sell_to_rolename),consign_type(l_consign_type),loginip(l_loginip)
			,category(l_category),roleinfo(l_roleinfo)
		{
		}

		DBConsignPrePostRoleArg(const DBConsignPrePostRoleArg &rhs)
			: roleid(rhs.roleid),userid(rhs.userid),seller_name(rhs.seller_name),
			margin(rhs.margin),token_item_id(rhs.token_item_id),token_item_cnt(rhs.token_item_cnt),
			token_item_idx(rhs.token_item_idx),price(rhs.price),shelf_period(rhs.shelf_period),
			sell_to_rolename(rhs.sell_to_rolename),consign_type(rhs.consign_type),loginip(rhs.loginip),
			category(rhs.category),roleinfo(rhs.roleinfo) { }

		Rpc::Data *Clone() const { return new DBConsignPrePostRoleArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBConsignPrePostRoleArg *r = dynamic_cast<const DBConsignPrePostRoleArg *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				userid = r->userid;
				seller_name = r->seller_name;
				margin = r->margin;
				token_item_id = r->token_item_id;
				token_item_cnt = r->token_item_cnt;
				token_item_idx = r->token_item_idx;
				price = r->price;
				shelf_period = r->shelf_period;
				sell_to_rolename = r->sell_to_rolename;
				consign_type = r->consign_type;
				loginip = r->loginip;
				category = r->category;
				roleinfo = r->roleinfo;
			}
			return *this;
		}

		DBConsignPrePostRoleArg& operator = (const DBConsignPrePostRoleArg &rhs)
		{
			const DBConsignPrePostRoleArg *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				userid = r->userid;
				seller_name = r->seller_name;
				margin = r->margin;
				token_item_id = r->token_item_id;
				token_item_cnt = r->token_item_cnt;
				token_item_idx = r->token_item_idx;
				price = r->price;
				shelf_period = r->shelf_period;
				sell_to_rolename = r->sell_to_rolename;
				consign_type = r->consign_type;
				loginip = r->loginip;
				category = r->category;
				roleinfo = r->roleinfo;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << userid;
			os << seller_name;
			os << margin;
			os << token_item_id;
			os << token_item_cnt;
			os << token_item_idx;
			os << price;
			os << shelf_period;
			os << sell_to_rolename;
			os << consign_type;
			os << loginip;
			os << category;
			os << roleinfo;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> userid;
			os >> seller_name;
			os >> margin;
			os >> token_item_id;
			os >> token_item_cnt;
			os >> token_item_idx;
			os >> price;
			os >> shelf_period;
			os >> sell_to_rolename;
			os >> consign_type;
			os >> loginip;
			os >> category;
			os >> roleinfo;
			return os;
		}

	};
};
#endif
