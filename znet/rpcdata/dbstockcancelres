#ifndef __GNET_DBSTOCKCANCELRES_RPCDATA
#define __GNET_DBSTOCKCANCELRES_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBStockCancelRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		int cash;
		int money;

	public:
		DBStockCancelRes (int l_cash = 0,int l_money = 0)
			: cash(l_cash),money(l_money)
		{
		}

		DBStockCancelRes(const DBStockCancelRes &rhs)
			: retcode(rhs.retcode),cash(rhs.cash),money(rhs.money) { }

		Rpc::Data *Clone() const { return new DBStockCancelRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBStockCancelRes *r = dynamic_cast<const DBStockCancelRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				cash = r->cash;
				money = r->money;
			}
			return *this;
		}

		DBStockCancelRes& operator = (const DBStockCancelRes &rhs)
		{
			const DBStockCancelRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				cash = r->cash;
				money = r->money;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << cash;
			os << money;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> cash;
			os >> money;
			return os;
		}

	};
};
#endif
