#ifndef __GNET_DBCONSIGNROLEFAILARG_RPCDATA
#define __GNET_DBCONSIGNROLEFAILARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class DBConsignRoleFailArg : public GNET::Rpc::Data
	{
	public:
		int64_t sn;
		int roleid;
		int fin_state;
		int64_t timestamp;

	public:
		DBConsignRoleFailArg (int64_t l_sn = 0,int l_roleid = 0,int l_fin_state = 0
			,int64_t l_timestamp = 0)
			: sn(l_sn),roleid(l_roleid),fin_state(l_fin_state)
			,timestamp(l_timestamp)
		{
		}

		DBConsignRoleFailArg(const DBConsignRoleFailArg &rhs)
			: sn(rhs.sn),roleid(rhs.roleid),fin_state(rhs.fin_state),
			timestamp(rhs.timestamp) { }

		Rpc::Data *Clone() const { return new DBConsignRoleFailArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBConsignRoleFailArg *r = dynamic_cast<const DBConsignRoleFailArg *>(&rhs);
			if (r && r != this)
			{
				sn = r->sn;
				roleid = r->roleid;
				fin_state = r->fin_state;
				timestamp = r->timestamp;
			}
			return *this;
		}

		DBConsignRoleFailArg& operator = (const DBConsignRoleFailArg &rhs)
		{
			const DBConsignRoleFailArg *r = &rhs;
			if (r && r != this)
			{
				sn = r->sn;
				roleid = r->roleid;
				fin_state = r->fin_state;
				timestamp = r->timestamp;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << sn;
			os << roleid;
			os << fin_state;
			os << timestamp;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> sn;
			os >> roleid;
			os >> fin_state;
			os >> timestamp;
			return os;
		}

	};
};
#endif
