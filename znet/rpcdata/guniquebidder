#ifndef __GNET_GUNIQUEBIDDER_RPCDATA
#define __GNET_GUNIQUEBIDDER_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GUniqueBidder : public GNET::Rpc::Data
	{
	public:
		int roleid;
		Octets rolename;
		int bidtime;
		int reserve1;
		int reserve2;

	public:
		GUniqueBidder (int l_roleid = 0,const Octets& l_rolename = Octets(0),int l_bidtime = 0
			,int l_reserve1 = 0,int l_reserve2 = 0)
			: roleid(l_roleid),rolename(l_rolename),bidtime(l_bidtime)
			,reserve1(l_reserve1),reserve2(l_reserve2)
		{
		}

		GUniqueBidder(const GUniqueBidder &rhs)
			: roleid(rhs.roleid),rolename(rhs.rolename),bidtime(rhs.bidtime),
			reserve1(rhs.reserve1),reserve2(rhs.reserve2) { }

		Rpc::Data *Clone() const { return new GUniqueBidder(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GUniqueBidder *r = dynamic_cast<const GUniqueBidder *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				rolename = r->rolename;
				bidtime = r->bidtime;
				reserve1 = r->reserve1;
				reserve2 = r->reserve2;
			}
			return *this;
		}

		GUniqueBidder& operator = (const GUniqueBidder &rhs)
		{
			const GUniqueBidder *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				rolename = r->rolename;
				bidtime = r->bidtime;
				reserve1 = r->reserve1;
				reserve2 = r->reserve2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << rolename;
			os << bidtime;
			os << reserve1;
			os << reserve2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> rolename;
			os >> bidtime;
			os >> reserve1;
			os >> reserve2;
			return os;
		}

	};
	typedef GNET::RpcDataVector<GUniqueBidder>	GUniqueBidderVector;
};
#endif
