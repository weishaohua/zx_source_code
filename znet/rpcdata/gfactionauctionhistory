#ifndef __GNET_GFACTIONAUCTIONHISTORY_RPCDATA
#define __GNET_GFACTIONAUCTIONHISTORY_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GFactionAuctionHistory : public GNET::Rpc::Data
	{
	public:
		int event_type;
		Octets rolename;
		int cost;
		int itemid;
		int reserved1;
		int reserved2;

	public:
		GFactionAuctionHistory (int l_event_type = 0,const Octets& l_rolename = Octets(),int l_cost = 0
			,int l_itemid = 0,int l_reserved1 = 0,int l_reserved2 = 0)
			: event_type(l_event_type),rolename(l_rolename),cost(l_cost)
			,itemid(l_itemid),reserved1(l_reserved1),reserved2(l_reserved2)
		{
		}

		GFactionAuctionHistory(const GFactionAuctionHistory &rhs)
			: event_type(rhs.event_type),rolename(rhs.rolename),cost(rhs.cost),
			itemid(rhs.itemid),reserved1(rhs.reserved1),reserved2(rhs.reserved2) { }

		Rpc::Data *Clone() const { return new GFactionAuctionHistory(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GFactionAuctionHistory *r = dynamic_cast<const GFactionAuctionHistory *>(&rhs);
			if (r && r != this)
			{
				event_type = r->event_type;
				rolename = r->rolename;
				cost = r->cost;
				itemid = r->itemid;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		GFactionAuctionHistory& operator = (const GFactionAuctionHistory &rhs)
		{
			const GFactionAuctionHistory *r = &rhs;
			if (r && r != this)
			{
				event_type = r->event_type;
				rolename = r->rolename;
				cost = r->cost;
				itemid = r->itemid;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << event_type;
			os << rolename;
			os << cost;
			os << itemid;
			os << reserved1;
			os << reserved2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> event_type;
			os >> rolename;
			os >> cost;
			os >> itemid;
			os >> reserved1;
			os >> reserved2;
			return os;
		}

	};
	typedef GNET::RpcDataVector<GFactionAuctionHistory>	GFactionAuctionHistoryVector;
};
#endif
