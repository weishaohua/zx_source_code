#ifndef __GNET_GCRSSVRTEAMSDATA_RPCDATA
#define __GNET_GCRSSVRTEAMSDATA_RPCDATA

#include "rpcdefs.h"

#include "gcrssvrteamsinfo"
#include "gcrssvrteamsrole"

namespace GNET
{
	class GCrssvrTeamsData : public GNET::Rpc::Data
	{
	public:
		GCrssvrTeamsInfo info;
		std::vector<GCrssvrTeamsRole> roles;
		int reserved1;
		int reserved2;

	public:
		GCrssvrTeamsData (const std::vector<GCrssvrTeamsRole>& l_roles = std::vector<GCrssvrTeamsRole>(),int l_reserved1 = 0,int l_reserved2 = 0)
			: roles(l_roles),reserved1(l_reserved1),reserved2(l_reserved2)
		{
		}

		GCrssvrTeamsData(const GCrssvrTeamsData &rhs)
			: info(rhs.info),roles(rhs.roles),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2) { }

		Rpc::Data *Clone() const { return new GCrssvrTeamsData(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GCrssvrTeamsData *r = dynamic_cast<const GCrssvrTeamsData *>(&rhs);
			if (r && r != this)
			{
				info = r->info;
				roles = r->roles;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		GCrssvrTeamsData& operator = (const GCrssvrTeamsData &rhs)
		{
			const GCrssvrTeamsData *r = &rhs;
			if (r && r != this)
			{
				info = r->info;
				roles = r->roles;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << info;
			os << roles;
			os << reserved1;
			os << reserved2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> info;
			os >> roles;
			os >> reserved1;
			os >> reserved2;
			return os;
		}

	};
};
#endif
