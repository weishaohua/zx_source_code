#ifndef __GNET_DBSNSGETROLERES_RPCDATA
#define __GNET_DBSNSGETROLERES_RPCDATA

#include "rpcdefs.h"

#include "gcreditinfo"
#include "gpetsinfo"
#include "gpocketinfo"

namespace GNET
{
	class DBSNSGetRoleRes : public GNET::Rpc::Data
	{
	public:
		int retcode;
		GCreditInfo creditinfo;
		GPetsInfo petinfo;
		GPocketInfo pocketinfo;

	public:
		DBSNSGetRoleRes (int l_retcode = 0,const GCreditInfo& l_creditinfo = GCreditInfo(),const GPetsInfo& l_petinfo = GPetsInfo()
			,const GPocketInfo& l_pocketinfo = GPocketInfo())
			: retcode(l_retcode),creditinfo(l_creditinfo),petinfo(l_petinfo)
			,pocketinfo(l_pocketinfo)
		{
		}

		DBSNSGetRoleRes(const DBSNSGetRoleRes &rhs)
			: retcode(rhs.retcode),creditinfo(rhs.creditinfo),petinfo(rhs.petinfo),
			pocketinfo(rhs.pocketinfo) { }

		Rpc::Data *Clone() const { return new DBSNSGetRoleRes(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const DBSNSGetRoleRes *r = dynamic_cast<const DBSNSGetRoleRes *>(&rhs);
			if (r && r != this)
			{
				retcode = r->retcode;
				creditinfo = r->creditinfo;
				petinfo = r->petinfo;
				pocketinfo = r->pocketinfo;
			}
			return *this;
		}

		DBSNSGetRoleRes& operator = (const DBSNSGetRoleRes &rhs)
		{
			const DBSNSGetRoleRes *r = &rhs;
			if (r && r != this)
			{
				retcode = r->retcode;
				creditinfo = r->creditinfo;
				petinfo = r->petinfo;
				pocketinfo = r->pocketinfo;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << creditinfo;
			os << petinfo;
			os << pocketinfo;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> creditinfo;
			os >> petinfo;
			os >> pocketinfo;
			return os;
		}

	};
};
#endif
