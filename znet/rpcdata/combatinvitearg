#ifndef __GNET_COMBATINVITEARG_RPCDATA
#define __GNET_COMBATINVITEARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class CombatInviteArg : public GNET::Rpc::Data
	{
	public:
		int roleid;
		Octets role_name;
		unsigned int factionid;
		Octets faction_name;
		unsigned int localsid;

	public:
		CombatInviteArg (int l_roleid = -1,const Octets& l_role_name = Octets(),unsigned int l_factionid = 0
			,const Octets& l_faction_name = Octets(),unsigned int l_localsid = 0)
			: roleid(l_roleid),role_name(l_role_name),factionid(l_factionid)
			,faction_name(l_faction_name),localsid(l_localsid)
		{
		}

		CombatInviteArg(const CombatInviteArg &rhs)
			: roleid(rhs.roleid),role_name(rhs.role_name),factionid(rhs.factionid),
			faction_name(rhs.faction_name),localsid(rhs.localsid) { }

		Rpc::Data *Clone() const { return new CombatInviteArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const CombatInviteArg *r = dynamic_cast<const CombatInviteArg *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				role_name = r->role_name;
				factionid = r->factionid;
				faction_name = r->faction_name;
				localsid = r->localsid;
			}
			return *this;
		}

		CombatInviteArg& operator = (const CombatInviteArg &rhs)
		{
			const CombatInviteArg *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				role_name = r->role_name;
				factionid = r->factionid;
				faction_name = r->faction_name;
				localsid = r->localsid;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << role_name;
			os << factionid;
			os << faction_name;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> role_name;
			os >> factionid;
			os >> faction_name;
			os >> localsid;
			return os;
		}

	};
};
#endif
