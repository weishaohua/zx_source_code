#ifndef __GNET_ROLEINFO_RPCDATA
#define __GNET_ROLEINFO_RPCDATA

#include "rpcdefs.h"

#include "groleinventory"

namespace GNET
{
	class RoleInfo : public GNET::Rpc::Data
	{
	public:
		int roleid;
		unsigned char gender;
		unsigned char faceid;
		unsigned char hairid;
		unsigned char earid;
		unsigned char tailid;
		unsigned char occupation;
		int level;
		Octets name;
		GRoleInventoryVector equipment;
		char status;
		int delete_time;
		int create_time;
		int lastlogin_time;
		float posx;
		float posy;
		float posz;
		int worldtag;
		Octets custom_status;
		Octets charactermode;
		int src_zoneid;
		unsigned char fashionid;
		short cultivation;

	public:
		RoleInfo (int l_roleid = -1,unsigned char l_gender = 0,unsigned char l_faceid = 0
			,unsigned char l_hairid = 0,unsigned char l_earid = 0,unsigned char l_tailid = 0
			,unsigned char l_occupation = 0,int l_level = 1,const Octets& l_name = Octets(0)
			,const GRoleInventoryVector& l_equipment = GRoleInventoryVector(),char l_status = 0,int l_delete_time = 0
			,int l_create_time = 0,int l_lastlogin_time = 0,float l_posx = 0.0
			,float l_posy = 0.0,float l_posz = 0.0,int l_worldtag = 0
			,Octets l_custom_status = Octets(),Octets l_charactermode = Octets(),int l_src_zoneid = 0
			,unsigned char l_fashionid = 0,short l_cultivation = 0)
			: roleid(l_roleid),gender(l_gender),faceid(l_faceid)
			,hairid(l_hairid),earid(l_earid),tailid(l_tailid)
			,occupation(l_occupation),level(l_level),name(l_name)
			,equipment(l_equipment),status(l_status),delete_time(l_delete_time)
			,create_time(l_create_time),lastlogin_time(l_lastlogin_time),posx(l_posx)
			,posy(l_posy),posz(l_posz),worldtag(l_worldtag)
			,custom_status(l_custom_status),charactermode(l_charactermode),src_zoneid(l_src_zoneid)
			,fashionid(l_fashionid),cultivation(l_cultivation)
		{
		}

		RoleInfo(const RoleInfo &rhs)
			: roleid(rhs.roleid),gender(rhs.gender),faceid(rhs.faceid),
			hairid(rhs.hairid),earid(rhs.earid),tailid(rhs.tailid),
			occupation(rhs.occupation),level(rhs.level),name(rhs.name),
			equipment(rhs.equipment),status(rhs.status),delete_time(rhs.delete_time),
			create_time(rhs.create_time),lastlogin_time(rhs.lastlogin_time),posx(rhs.posx),
			posy(rhs.posy),posz(rhs.posz),worldtag(rhs.worldtag),
			custom_status(rhs.custom_status),charactermode(rhs.charactermode),src_zoneid(rhs.src_zoneid),
			fashionid(rhs.fashionid),cultivation(rhs.cultivation) { }

		Rpc::Data *Clone() const { return new RoleInfo(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const RoleInfo *r = dynamic_cast<const RoleInfo *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				gender = r->gender;
				faceid = r->faceid;
				hairid = r->hairid;
				earid = r->earid;
				tailid = r->tailid;
				occupation = r->occupation;
				level = r->level;
				name = r->name;
				equipment = r->equipment;
				status = r->status;
				delete_time = r->delete_time;
				create_time = r->create_time;
				lastlogin_time = r->lastlogin_time;
				posx = r->posx;
				posy = r->posy;
				posz = r->posz;
				worldtag = r->worldtag;
				custom_status = r->custom_status;
				charactermode = r->charactermode;
				src_zoneid = r->src_zoneid;
				fashionid = r->fashionid;
				cultivation = r->cultivation;
			}
			return *this;
		}

		RoleInfo& operator = (const RoleInfo &rhs)
		{
			const RoleInfo *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				gender = r->gender;
				faceid = r->faceid;
				hairid = r->hairid;
				earid = r->earid;
				tailid = r->tailid;
				occupation = r->occupation;
				level = r->level;
				name = r->name;
				equipment = r->equipment;
				status = r->status;
				delete_time = r->delete_time;
				create_time = r->create_time;
				lastlogin_time = r->lastlogin_time;
				posx = r->posx;
				posy = r->posy;
				posz = r->posz;
				worldtag = r->worldtag;
				custom_status = r->custom_status;
				charactermode = r->charactermode;
				src_zoneid = r->src_zoneid;
				fashionid = r->fashionid;
				cultivation = r->cultivation;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << gender;
			os << faceid;
			os << hairid;
			os << earid;
			os << tailid;
			os << occupation;
			os << level;
			os << name;
			os << equipment;
			os << status;
			os << delete_time;
			os << create_time;
			os << lastlogin_time;
			os << posx;
			os << posy;
			os << posz;
			os << worldtag;
			os << custom_status;
			os << charactermode;
			os << src_zoneid;
			os << fashionid;
			os << cultivation;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> gender;
			os >> faceid;
			os >> hairid;
			os >> earid;
			os >> tailid;
			os >> occupation;
			os >> level;
			os >> name;
			os >> equipment;
			os >> status;
			os >> delete_time;
			os >> create_time;
			os >> lastlogin_time;
			os >> posx;
			os >> posy;
			os >> posz;
			os >> worldtag;
			os >> custom_status;
			os >> charactermode;
			os >> src_zoneid;
			os >> fashionid;
			os >> cultivation;
			return os;
		}

	};
	typedef GNET::RpcDataVector<RoleInfo>	RoleInfoVector;
};
#endif
