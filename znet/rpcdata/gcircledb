#ifndef __GNET_GCIRCLEDB_RPCDATA
#define __GNET_GCIRCLEDB_RPCDATA

#include "rpcdefs.h"

#include "gcirclememberdb"

namespace GNET
{
	class GCircleDB : public GNET::Rpc::Data
	{
	public:
		unsigned int circleid;
		unsigned int circlename;
		unsigned int master_rid;
		std::vector<GCircleMemberDB> member;
		unsigned char circlegrade;
		unsigned char circleversion;
		unsigned int taskpoint;
		int createtime;
		int tasksavetime;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;
		int reserved5;
		int reserved6;

	public:
		GCircleDB (unsigned int l_circleid = 0,unsigned int l_circlename = 0,unsigned int l_master_rid = 0
			,unsigned char l_circlegrade = 0,unsigned char l_circleversion = 0,unsigned int l_taskpoint = 0
			,int l_createtime = 0,int l_tasksavetime = 0,int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0
			,int l_reserved5 = 0,int l_reserved6 = 0)
			: circleid(l_circleid),circlename(l_circlename),master_rid(l_master_rid)
			,circlegrade(l_circlegrade),circleversion(l_circleversion),taskpoint(l_taskpoint)
			,createtime(l_createtime),tasksavetime(l_tasksavetime),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
			,reserved5(l_reserved5),reserved6(l_reserved6)
		{
		}

		GCircleDB(const GCircleDB &rhs)
			: circleid(rhs.circleid),circlename(rhs.circlename),master_rid(rhs.master_rid),
			member(rhs.member),circlegrade(rhs.circlegrade),circleversion(rhs.circleversion),
			taskpoint(rhs.taskpoint),createtime(rhs.createtime),tasksavetime(rhs.tasksavetime),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2),reserved3(rhs.reserved3),
			reserved4(rhs.reserved4),reserved5(rhs.reserved5),reserved6(rhs.reserved6) { }

		Rpc::Data *Clone() const { return new GCircleDB(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GCircleDB *r = dynamic_cast<const GCircleDB *>(&rhs);
			if (r && r != this)
			{
				circleid = r->circleid;
				circlename = r->circlename;
				master_rid = r->master_rid;
				member = r->member;
				circlegrade = r->circlegrade;
				circleversion = r->circleversion;
				taskpoint = r->taskpoint;
				createtime = r->createtime;
				tasksavetime = r->tasksavetime;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
			}
			return *this;
		}

		GCircleDB& operator = (const GCircleDB &rhs)
		{
			const GCircleDB *r = &rhs;
			if (r && r != this)
			{
				circleid = r->circleid;
				circlename = r->circlename;
				master_rid = r->master_rid;
				member = r->member;
				circlegrade = r->circlegrade;
				circleversion = r->circleversion;
				taskpoint = r->taskpoint;
				createtime = r->createtime;
				tasksavetime = r->tasksavetime;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << circleid;
			os << circlename;
			os << master_rid;
			os << member;
			os << circlegrade;
			os << circleversion;
			os << taskpoint;
			os << createtime;
			os << tasksavetime;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			os << reserved5;
			os << reserved6;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> circleid;
			os >> circlename;
			os >> master_rid;
			os >> member;
			os >> circlegrade;
			os >> circleversion;
			os >> taskpoint;
			os >> createtime;
			os >> tasksavetime;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			os >> reserved5;
			os >> reserved6;
			return os;
		}

	};
};
#endif
