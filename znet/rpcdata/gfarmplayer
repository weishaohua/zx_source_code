#ifndef __GNET_GFARMPLAYER_RPCDATA
#define __GNET_GFARMPLAYER_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GFarmPlayer : public GNET::Rpc::Data
	{
	public:
		int64_t charm;
		int64_t money;
		int level;
		Octets states;
		Octets items;
		Octets cooldown;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;
		int reserved5;
		int reserved6;
		int reserved7;
		int reserved8;

	public:
		GFarmPlayer (int64_t l_charm = 0,int64_t l_money = 0,int l_level = 0
			,const Octets& l_states = Octets(),const Octets& l_items = Octets(),const Octets& l_cooldown = Octets()
			,int l_reserved1 = 0,int l_reserved2 = 0,int l_reserved3 = 0
			,int l_reserved4 = 0,int l_reserved5 = 0,int l_reserved6 = 0
			,int l_reserved7 = 0,int l_reserved8 = 0)
			: charm(l_charm),money(l_money),level(l_level)
			,states(l_states),items(l_items),cooldown(l_cooldown)
			,reserved1(l_reserved1),reserved2(l_reserved2),reserved3(l_reserved3)
			,reserved4(l_reserved4),reserved5(l_reserved5),reserved6(l_reserved6)
			,reserved7(l_reserved7),reserved8(l_reserved8)
		{
		}

		GFarmPlayer(const GFarmPlayer &rhs)
			: charm(rhs.charm),money(rhs.money),level(rhs.level),
			states(rhs.states),items(rhs.items),cooldown(rhs.cooldown),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2),reserved3(rhs.reserved3),
			reserved4(rhs.reserved4),reserved5(rhs.reserved5),reserved6(rhs.reserved6),
			reserved7(rhs.reserved7),reserved8(rhs.reserved8) { }

		Rpc::Data *Clone() const { return new GFarmPlayer(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GFarmPlayer *r = dynamic_cast<const GFarmPlayer *>(&rhs);
			if (r && r != this)
			{
				charm = r->charm;
				money = r->money;
				level = r->level;
				states = r->states;
				items = r->items;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		GFarmPlayer& operator = (const GFarmPlayer &rhs)
		{
			const GFarmPlayer *r = &rhs;
			if (r && r != this)
			{
				charm = r->charm;
				money = r->money;
				level = r->level;
				states = r->states;
				items = r->items;
				cooldown = r->cooldown;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << charm;
			os << money;
			os << level;
			os << states;
			os << items;
			os << cooldown;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			os << reserved5;
			os << reserved6;
			os << reserved7;
			os << reserved8;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> charm;
			os >> money;
			os >> level;
			os >> states;
			os >> items;
			os >> cooldown;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			os >> reserved5;
			os >> reserved6;
			os >> reserved7;
			os >> reserved8;
			return os;
		}

	};
};
#endif
