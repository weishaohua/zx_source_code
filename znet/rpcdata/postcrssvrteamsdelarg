#ifndef __GNET_POSTCRSSVRTEAMSDELARG_RPCDATA
#define __GNET_POSTCRSSVRTEAMSDELARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class PostCrssvrTeamsDelArg : public GNET::Rpc::Data
	{
	public:
		int zoneid;
		Octets teamname;
		int teamid;

	public:
		PostCrssvrTeamsDelArg (int l_zoneid = -1,const Octets& l_teamname = Octets(0),int l_teamid = -1)
			: zoneid(l_zoneid),teamname(l_teamname),teamid(l_teamid)
		{
		}

		PostCrssvrTeamsDelArg(const PostCrssvrTeamsDelArg &rhs)
			: zoneid(rhs.zoneid),teamname(rhs.teamname),teamid(rhs.teamid) { }

		Rpc::Data *Clone() const { return new PostCrssvrTeamsDelArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const PostCrssvrTeamsDelArg *r = dynamic_cast<const PostCrssvrTeamsDelArg *>(&rhs);
			if (r && r != this)
			{
				zoneid = r->zoneid;
				teamname = r->teamname;
				teamid = r->teamid;
			}
			return *this;
		}

		PostCrssvrTeamsDelArg& operator = (const PostCrssvrTeamsDelArg &rhs)
		{
			const PostCrssvrTeamsDelArg *r = &rhs;
			if (r && r != this)
			{
				zoneid = r->zoneid;
				teamname = r->teamname;
				teamid = r->teamid;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << zoneid;
			os << teamname;
			os << teamid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> zoneid;
			os >> teamname;
			os >> teamid;
			return os;
		}

	};
};
#endif
