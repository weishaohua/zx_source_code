#ifndef __GNET_GSYSLOG_RPCDATA
#define __GNET_GSYSLOG_RPCDATA

#include "rpcdefs.h"

#include "groleinventory"

namespace GNET
{
	class GSysLog : public GNET::Rpc::Data
	{
	public:
		int roleid;
		int time;
		int ip;
		short source;
		int money;
		GRoleInventoryVector items;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GSysLog (int l_roleid = 0,int l_time = -1,int l_ip = 0
			,short l_source = 0,int l_money = 0,int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0)
			: roleid(l_roleid),time(l_time),ip(l_ip)
			,source(l_source),money(l_money),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
		{
		}

		GSysLog(const GSysLog &rhs)
			: roleid(rhs.roleid),time(rhs.time),ip(rhs.ip),
			source(rhs.source),money(rhs.money),items(rhs.items),
			reserved1(rhs.reserved1),reserved2(rhs.reserved2),reserved3(rhs.reserved3),
			reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GSysLog(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GSysLog *r = dynamic_cast<const GSysLog *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				time = r->time;
				ip = r->ip;
				source = r->source;
				money = r->money;
				items = r->items;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GSysLog& operator = (const GSysLog &rhs)
		{
			const GSysLog *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				time = r->time;
				ip = r->ip;
				source = r->source;
				money = r->money;
				items = r->items;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << time;
			os << ip;
			os << source;
			os << money;
			os << items;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> time;
			os >> ip;
			os >> source;
			os >> money;
			os >> items;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
};
#endif
