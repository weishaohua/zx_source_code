#ifndef __GNET_GTERRITORYINFO_RPCDATA
#define __GNET_GTERRITORYINFO_RPCDATA

#include "rpcdefs.h"

#include "gtchallenge"
#include "gtchallenge"

namespace GNET
{
	class GTerritoryInfo : public GNET::Rpc::Data
	{
	public:
		int id;
		unsigned int owner;
		int occupy_time;
		int color;
		GTChallengeVector challengelist;
		unsigned int defender;
		GTChallenge success_challenge;
		float success_award;
		int start_time;
		int assis_drawn_num;
		int rand_award_itemid;
		int rand_award_itemcount;
		char rand_award_drawn;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;
		int reserved5;
		int reserved6;
		int reserved7;
		int reserved8;

	public:
		GTerritoryInfo (int l_id = 0,unsigned int l_owner = 0,int l_occupy_time = 0
			,int l_color = 0,const GTChallengeVector& l_challengelist = GTChallengeVector(),unsigned int l_defender = 0
			,const GTChallenge& l_success_challenge = GTChallenge(),float l_success_award = 0.0,int l_start_time = 0
			,int l_assis_drawn_num = 0,int l_rand_award_itemid = 0,int l_rand_award_itemcount = 0
			,char l_rand_award_drawn = 1,int l_reserved1 = 0,int l_reserved2 = 0
			,int l_reserved3 = 0,int l_reserved4 = 0,int l_reserved5 = 0
			,int l_reserved6 = 0,int l_reserved7 = 0,int l_reserved8 = 0)
			: id(l_id),owner(l_owner),occupy_time(l_occupy_time)
			,color(l_color),challengelist(l_challengelist),defender(l_defender)
			,success_challenge(l_success_challenge),success_award(l_success_award),start_time(l_start_time)
			,assis_drawn_num(l_assis_drawn_num),rand_award_itemid(l_rand_award_itemid),rand_award_itemcount(l_rand_award_itemcount)
			,rand_award_drawn(l_rand_award_drawn),reserved1(l_reserved1),reserved2(l_reserved2)
			,reserved3(l_reserved3),reserved4(l_reserved4),reserved5(l_reserved5)
			,reserved6(l_reserved6),reserved7(l_reserved7),reserved8(l_reserved8)
		{
		}

		GTerritoryInfo(const GTerritoryInfo &rhs)
			: id(rhs.id),owner(rhs.owner),occupy_time(rhs.occupy_time),
			color(rhs.color),challengelist(rhs.challengelist),defender(rhs.defender),
			success_challenge(rhs.success_challenge),success_award(rhs.success_award),start_time(rhs.start_time),
			assis_drawn_num(rhs.assis_drawn_num),rand_award_itemid(rhs.rand_award_itemid),rand_award_itemcount(rhs.rand_award_itemcount),
			rand_award_drawn(rhs.rand_award_drawn),reserved1(rhs.reserved1),reserved2(rhs.reserved2),
			reserved3(rhs.reserved3),reserved4(rhs.reserved4),reserved5(rhs.reserved5),
			reserved6(rhs.reserved6),reserved7(rhs.reserved7),reserved8(rhs.reserved8) { }

		Rpc::Data *Clone() const { return new GTerritoryInfo(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GTerritoryInfo *r = dynamic_cast<const GTerritoryInfo *>(&rhs);
			if (r && r != this)
			{
				id = r->id;
				owner = r->owner;
				occupy_time = r->occupy_time;
				color = r->color;
				challengelist = r->challengelist;
				defender = r->defender;
				success_challenge = r->success_challenge;
				success_award = r->success_award;
				start_time = r->start_time;
				assis_drawn_num = r->assis_drawn_num;
				rand_award_itemid = r->rand_award_itemid;
				rand_award_itemcount = r->rand_award_itemcount;
				rand_award_drawn = r->rand_award_drawn;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		GTerritoryInfo& operator = (const GTerritoryInfo &rhs)
		{
			const GTerritoryInfo *r = &rhs;
			if (r && r != this)
			{
				id = r->id;
				owner = r->owner;
				occupy_time = r->occupy_time;
				color = r->color;
				challengelist = r->challengelist;
				defender = r->defender;
				success_challenge = r->success_challenge;
				success_award = r->success_award;
				start_time = r->start_time;
				assis_drawn_num = r->assis_drawn_num;
				rand_award_itemid = r->rand_award_itemid;
				rand_award_itemcount = r->rand_award_itemcount;
				rand_award_drawn = r->rand_award_drawn;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
				reserved5 = r->reserved5;
				reserved6 = r->reserved6;
				reserved7 = r->reserved7;
				reserved8 = r->reserved8;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << id;
			os << owner;
			os << occupy_time;
			os << color;
			os << challengelist;
			os << defender;
			os << success_challenge;
			os << success_award;
			os << start_time;
			os << assis_drawn_num;
			os << rand_award_itemid;
			os << rand_award_itemcount;
			os << rand_award_drawn;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			os << reserved5;
			os << reserved6;
			os << reserved7;
			os << reserved8;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> id;
			os >> owner;
			os >> occupy_time;
			os >> color;
			os >> challengelist;
			os >> defender;
			os >> success_challenge;
			os >> success_award;
			os >> start_time;
			os >> assis_drawn_num;
			os >> rand_award_itemid;
			os >> rand_award_itemcount;
			os >> rand_award_drawn;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			os >> reserved5;
			os >> reserved6;
			os >> reserved7;
			os >> reserved8;
			return os;
		}

	};
	typedef GNET::RpcDataVector<GTerritoryInfo>	GTerritoryInfoVector;
};
#endif
