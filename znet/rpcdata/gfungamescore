#ifndef __GNET_GFUNGAMESCORE_RPCDATA
#define __GNET_GFUNGAMESCORE_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GFunGameScore : public GNET::Rpc::Data
	{
	public:
		int64_t score;
		int win_count;
		int lose_count;
		int draw_count;
		int escape_count;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GFunGameScore (int64_t l_score = 0,int l_win_count = 0,int l_lose_count = 0
			,int l_draw_count = 0,int l_escape_count = 0,int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0)
			: score(l_score),win_count(l_win_count),lose_count(l_lose_count)
			,draw_count(l_draw_count),escape_count(l_escape_count),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
		{
		}

		GFunGameScore(const GFunGameScore &rhs)
			: score(rhs.score),win_count(rhs.win_count),lose_count(rhs.lose_count),
			draw_count(rhs.draw_count),escape_count(rhs.escape_count),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2),reserved3(rhs.reserved3),reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GFunGameScore(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GFunGameScore *r = dynamic_cast<const GFunGameScore *>(&rhs);
			if (r && r != this)
			{
				score = r->score;
				win_count = r->win_count;
				lose_count = r->lose_count;
				draw_count = r->draw_count;
				escape_count = r->escape_count;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GFunGameScore& operator = (const GFunGameScore &rhs)
		{
			const GFunGameScore *r = &rhs;
			if (r && r != this)
			{
				score = r->score;
				win_count = r->win_count;
				lose_count = r->lose_count;
				draw_count = r->draw_count;
				escape_count = r->escape_count;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << score;
			os << win_count;
			os << lose_count;
			os << draw_count;
			os << escape_count;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> score;
			os >> win_count;
			os >> lose_count;
			os >> draw_count;
			os >> escape_count;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
};
#endif
