#ifndef __GNET_ROLESIMPLE_RPCDATA
#define __GNET_ROLESIMPLE_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class RoleSimple : public GNET::Rpc::Data
	{
	public:
		int64_t roleid;
		Octets rolename;
		int level;

	public:
		RoleSimple (int64_t l_roleid = 0,const Octets& l_rolename = Octets(0),int l_level = 0)
			: roleid(l_roleid),rolename(l_rolename),level(l_level)
		{
		}

		RoleSimple(const RoleSimple &rhs)
			: roleid(rhs.roleid),rolename(rhs.rolename),level(rhs.level) { }

		Rpc::Data *Clone() const { return new RoleSimple(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const RoleSimple *r = dynamic_cast<const RoleSimple *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				rolename = r->rolename;
				level = r->level;
			}
			return *this;
		}

		RoleSimple& operator = (const RoleSimple &rhs)
		{
			const RoleSimple *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				rolename = r->rolename;
				level = r->level;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << rolename;
			os << level;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> rolename;
			os >> level;
			return os;
		}

	};
	typedef GNET::RpcDataVector<RoleSimple>	RoleSimpleVector;
};
#endif
