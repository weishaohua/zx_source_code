#ifndef __GNET_USERPLAYERDATA_RPCDATA
#define __GNET_USERPLAYERDATA_RPCDATA

#include "rpcdefs.h"

#include "user"
#include "grolebase"
#include "grolebase2"
#include "grolestatus"
#include "grolepocket"
#include "grolestorehouse"
#include "groletask"
#include "groleachievement"
#include "gsnsplayerinfocache"
#include "grolenamehis"

namespace GNET
{
	class UserPlayerData : public GNET::Rpc::Data
	{
	public:
		User user;
		GRoleBase base;
		GRoleBase2 base2;
		GRoleStatus status;
		GRolePocket inventory;
		GRoleStorehouse storehouse;
		GRoleTask task;
		GRoleAchievement achievement;
		GSNSPlayerInfoCache snsplayerinfo;
		Octets onlineaward;
		GRoleNameHisVector rolenamehis;

	public:
		UserPlayerData ()
		{
		}

		UserPlayerData(const UserPlayerData &rhs)
			: user(rhs.user),base(rhs.base),base2(rhs.base2),
			status(rhs.status),inventory(rhs.inventory),storehouse(rhs.storehouse),
			task(rhs.task),achievement(rhs.achievement),snsplayerinfo(rhs.snsplayerinfo),
			onlineaward(rhs.onlineaward),rolenamehis(rhs.rolenamehis) { }

		Rpc::Data *Clone() const { return new UserPlayerData(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const UserPlayerData *r = dynamic_cast<const UserPlayerData *>(&rhs);
			if (r && r != this)
			{
				user = r->user;
				base = r->base;
				base2 = r->base2;
				status = r->status;
				inventory = r->inventory;
				storehouse = r->storehouse;
				task = r->task;
				achievement = r->achievement;
				snsplayerinfo = r->snsplayerinfo;
				onlineaward = r->onlineaward;
				rolenamehis = r->rolenamehis;
			}
			return *this;
		}

		UserPlayerData& operator = (const UserPlayerData &rhs)
		{
			const UserPlayerData *r = &rhs;
			if (r && r != this)
			{
				user = r->user;
				base = r->base;
				base2 = r->base2;
				status = r->status;
				inventory = r->inventory;
				storehouse = r->storehouse;
				task = r->task;
				achievement = r->achievement;
				snsplayerinfo = r->snsplayerinfo;
				onlineaward = r->onlineaward;
				rolenamehis = r->rolenamehis;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << user;
			os << base;
			os << base2;
			os << status;
			os << inventory;
			os << storehouse;
			os << task;
			os << achievement;
			os << snsplayerinfo;
			os << onlineaward;
			os << rolenamehis;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> user;
			os >> base;
			os >> base2;
			os >> status;
			os >> inventory;
			os >> storehouse;
			os >> task;
			os >> achievement;
			os >> snsplayerinfo;
			os >> onlineaward;
			os >> rolenamehis;
			return os;
		}

	};
};
#endif
