#ifndef __GNET_GTERRITORYSTORE_RPCDATA
#define __GNET_GTERRITORYSTORE_RPCDATA

#include "rpcdefs.h"

#include "gterritoryinfo"

namespace GNET
{
	class GTerritoryStore : public GNET::Rpc::Data
	{
	public:
		int status;
		GTerritoryInfoVector tlist;
		int reserved1;
		int reserved2;
		int reserved3;
		int reserved4;

	public:
		GTerritoryStore (int l_status = 0,const GTerritoryInfoVector& l_tlist = GTerritoryInfoVector(),int l_reserved1 = 0
			,int l_reserved2 = 0,int l_reserved3 = 0,int l_reserved4 = 0)
			: status(l_status),tlist(l_tlist),reserved1(l_reserved1)
			,reserved2(l_reserved2),reserved3(l_reserved3),reserved4(l_reserved4)
		{
		}

		GTerritoryStore(const GTerritoryStore &rhs)
			: status(rhs.status),tlist(rhs.tlist),reserved1(rhs.reserved1),
			reserved2(rhs.reserved2),reserved3(rhs.reserved3),reserved4(rhs.reserved4) { }

		Rpc::Data *Clone() const { return new GTerritoryStore(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GTerritoryStore *r = dynamic_cast<const GTerritoryStore *>(&rhs);
			if (r && r != this)
			{
				status = r->status;
				tlist = r->tlist;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		GTerritoryStore& operator = (const GTerritoryStore &rhs)
		{
			const GTerritoryStore *r = &rhs;
			if (r && r != this)
			{
				status = r->status;
				tlist = r->tlist;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
				reserved4 = r->reserved4;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << status;
			os << tlist;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			os << reserved4;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> status;
			os >> tlist;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			os >> reserved4;
			return os;
		}

	};
};
#endif
