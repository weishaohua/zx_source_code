
#ifndef __GNET_DBSNSUPDATEMESSAGE_HPP
#define __GNET_DBSNSUPDATEMESSAGE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbsnsupdatemessagearg"
#include "dbsnsupdatemessageres"

namespace GNET
{

class DBSNSUpdateMessage : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbsnsupdatemessage"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBSNSUpdateMessageArg *arg = (DBSNSUpdateMessageArg *)argument;
		DBSNSUpdateMessageRes *res = (DBSNSUpdateMessageRes *)result;

		try
		{
			StorageEnv::Storage *pdb = StorageEnv::GetStorage("snsmessage");
			StorageEnv::CommonTransaction txn;

			try
			{
				int64_t key = ((int64_t)arg->message.message_type<<32)|(int64_t)arg->message.message_id;

				if (arg->oper == 0)		//update
					pdb->insert(Marshal::OctetsStream()<<key, Marshal::OctetsStream()<<arg->message, txn);
				else
					pdb->del(Marshal::OctetsStream()<<key, txn);

				res->retcode = ERR_SUCCESS;
			}
			catch (DbException &e) { throw e; }
			catch ( ... )
			{
				DbException ee(DB_OLD_VERSION);
				txn.abort(ee);
				throw ee;
			}
		}
		catch (DbException &e)
		{
			Log::log(LOG_ERR, "gamedbd: DBSNSUpdateMessage failed, what=%s\n", e.what());
			res->retcode = ERR_FAILED;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBSNSUpdateMessageArg *arg = (DBSNSUpdateMessageArg *)argument;
		// DBSNSUpdateMessageRes *res = (DBSNSUpdateMessageRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
