
#ifndef __GNET_DBREFUPDATEREFERRER_HPP
#define __GNET_DBREFUPDATEREFERRER_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbrefupdatereferrerarg"
#include "grolebase2"


namespace GNET
{

class DBRefUpdateReferrer : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbrefupdatereferrer"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBRefUpdateReferrerArg *arg = (DBRefUpdateReferrerArg *)argument;
		RpcRetcode *res = (RpcRetcode *)result;

		try
		{
			StorageEnv::Storage *pdb = StorageEnv::GetStorage("base2");
			StorageEnv::CommonTransaction txn;
			Marshal::OctetsStream oct_value;

			try
			{
				GRoleBase2 base2;
				if (pdb->find(Marshal::OctetsStream()<<arg->referrer.roleid, oct_value, txn))
					Marshal::OctetsStream(oct_value)>>base2;
				
				base2.id = arg->referrer.roleid;
				base2.bonus_withdraw = arg->referrer.bonus_withdraw;
				base2.exp_withdraw_today = arg->referrer.exp_withdraw_today;
				base2.exp_withdraw_time = arg->referrer.exp_withdraw_time;

				pdb->insert(Marshal::OctetsStream()<<base2.id, Marshal::OctetsStream()<<base2, txn);
				res->retcode = ERR_SUCCESS;
			}
			catch (DbException &e) { throw e; }
			catch ( ... )
			{
				DbException ee(DB_OLD_VERSION);
				txn.abort(ee);
				throw ee;
			}
		}
		catch (DbException &e)
		{
			Log::log(LOG_ERR, "gamedbd: DBSNSUpdateReferrer failed, what=%s\n", e.what());
			res->retcode = ERR_FAILED;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBRefUpdateReferrerArg *arg = (DBRefUpdateReferrerArg *)argument;
		// RpcRetcode *res = (RpcRetcode *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
