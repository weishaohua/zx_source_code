
#ifndef __GNET_SYNCCRSSVRTEAMSROLE_HPP
#define __GNET_SYNCCRSSVRTEAMSROLE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "synccrssvrteamsrolearg"
#include "synccrssvrteamsroleres"

namespace GNET
{

class SyncCrssvrTeamsRole : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "synccrssvrteamsrole"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		SyncCrssvrTeamsRoleArg *arg = (SyncCrssvrTeamsRoleArg *)argument;
		SyncCrssvrTeamsRoleRes *res = (SyncCrssvrTeamsRoleRes *)result;
		
		LOG_TRACE("SyncCrssvrTeamsRole, teamid=%d, roleid=%d", arg->teamid, arg->role.roleid);

		Marshal::OctetsStream key, value;
		Marshal::OctetsStream krole, kteamid;
		try
		{
			StorageEnv::Storage * pcrssvrteams = StorageEnv::GetStorage("crssvrteams");

			StorageEnv::CommonTransaction txn;
			try{
				if(arg->teamid == 0)
				{
					res->retcode = ERR_WT_DB_KEYZERO;
					return;
				}

				GCrssvrTeamsData crssvrteams;
				krole << arg->role.roleid;
				kteamid << arg->teamid;
				if( pcrssvrteams->find(kteamid, value, txn) )
				{
					value >> crssvrteams;
				}

				if(crssvrteams.info.teamid <= 0)
				{
					Log::formatlog("SyncCrssvrTeamsRole","teamid=%d:roleid=%d NOT EXSIT", arg->teamid, arg->role.roleid);
					res->retcode = ERR_CRSSVRTEAMS_NOTEXIST;
					return;
				}
				
				std::vector<GCrssvrTeamsRole>::iterator it_roles = crssvrteams.roles.begin(), ie_roles=crssvrteams.roles.end();
				for(;it_roles!=ie_roles;++it_roles)
				{
					if (arg->role.roleid == it_roles->roleid)
					{
						*it_roles = arg->role;
						break;
					}
				}
				if(it_roles==ie_roles)
				{
					// 没有这个角色，不应该
					Log::log( LOG_ERR, "SyncCrssvrTeamsRole, teamid=%d, roleid=%d",arg->teamid,arg->role.roleid);
					res->retcode = ERR_CRSSVRTEAMS_ROLE_NOT_IN;
					return;
				}

				pcrssvrteams->insert( kteamid, Marshal::OctetsStream()<<crssvrteams, txn );
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBCrssvrTeamsRole, teamid=%d, roleid=%d what=%s.",arg->teamid,arg->role.roleid,e.what());
			res->retcode = ERR_EXCEPTION;
		}

	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// SyncCrssvrTeamsRoleArg *arg = (SyncCrssvrTeamsRoleArg *)argument;
		// SyncCrssvrTeamsRoleRes *res = (SyncCrssvrTeamsRoleRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
