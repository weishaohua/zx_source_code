
#ifndef __GNET_DBFACTIONBRIEF_HPP
#define __GNET_DBFACTIONBRIEF_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "factionid"
#include "factionbriefres"

namespace GNET
{

class DBFactionBrief : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbfactionbrief"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		FactionId *arg = (FactionId *)argument;
		FactionBriefRes *res = (FactionBriefRes *)result;

		LOG_TRACE( "DBFactionBrief, factionid=%d.\n", arg->fid );

		try
		{
			GFactionInfo info;
			StorageEnv::Storage * pcache = StorageEnv::GetStorage("factioncache");
			StorageEnv::AtomTransaction txn;
			try
			{
				Marshal::OctetsStream(pcache->find( Marshal::OctetsStream()<<*arg, txn )) >> info;
				res->value.fid = info.fid;
				res->value.name = info.name;
				res->value.announce = info.announce;
				res->value.level = info.level;
				res->value.master = info.master;
				res->value.prosperity = info.prosperity;
				res->value.createtime = info.createtime;
				res->value.population = info.population;
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBFactionBrief, factionid=%d, what=%s\n", arg->fid, e.what() );
			if(e.get_errno()==DB_LOCK_DEADLOCK)
				res->retcode = ERR_AGAIN;
			else
				res->retcode = ERR_DATANOTFIND;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void OnTimeout()
	{
	}

};

};
#endif
