
#ifndef __GNET_GETROLEID_HPP
#define __GNET_GETROLEID_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "dbbuffer.h"
#include "getroleidarg"
#include "getroleidres"
namespace GNET
{

class GetRoleId : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "getroleid"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		GetRoleIdArg *arg = (GetRoleIdArg *)argument;
		GetRoleIdRes *res = (GetRoleIdRes *)result;

		try
		{
			StorageEnv::Storage * prolename = StorageEnv::GetStorage("rolename");
			StorageEnv::Storage * pbase = StorageEnv::GetStorage("base");
			StorageEnv::AtomTransaction txn;
			try
			{
				res->newname = arg->rolename;
				Marshal::OctetsStream( prolename->find( arg->rolename, txn ) ) >> res->roleid;
				GRoleBase base;
				Marshal::OctetsStream(pbase->find(Marshal::OctetsStream() << res->roleid, txn)) >> base;
				res->newname = base.name; //查询老名字 返回最新名字和 id
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			res->retcode = -1;
		}
		LOG_TRACE("GetRoleId, retcode=%d,roleid=%d,reason=%d", res->retcode, res->roleid,arg->reason);
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// GetRoleIdArg *arg = (GetRoleIdArg *)argument;
		// GetRoleIdRes *res = (GetRoleIdRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
