
#ifndef __GNET_PUTMONEYINVENTORY_HPP
#define __GNET_PUTMONEYINVENTORY_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "dbbuffer.h"
#include "putmoneyinventoryarg"


namespace GNET
{

class PutMoneyInventory : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "putmoneyinventory"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		PutMoneyInventoryArg *arg = (PutMoneyInventoryArg *)argument;
		RpcRetcode *res = (RpcRetcode *)result;
		Marshal::OctetsStream key;

		LOG_TRACE( "PutMoneyInventory, roleid=%d.\n", arg->roleid );

		try
		{
			StorageEnv::Storage * pinventory = StorageEnv::GetStorage("inventory");
			StorageEnv::CommonTransaction txn;
			try
			{
				GRolePocket	bag;
				key << arg->roleid;
				Marshal::OctetsStream(pinventory->find( key, txn )) >> bag;
				bag.money = arg->money;
				bag.items.swap(arg->goods);
				pinventory->insert( key, Marshal::OctetsStream() << bag, txn );
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "PutMoneyInventory, roleid=%d, what=%s\n", arg->roleid, e.what() );
			res->retcode = ERR_TRADE_DB_FAILURE;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void OnTimeout()
	{
	}

};

};
#endif
