
#ifndef __GNET_DBGETMAIL_HPP
#define __GNET_DBGETMAIL_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "gmailid"
#include "dbgetmailres"


namespace GNET
{

class DBGetMail : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbgetmail"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		GMailID *arg = (GMailID *)argument;
		DBGetMailRes *res = (DBGetMailRes *)result;
		Marshal::OctetsStream key, value;

		LOG_TRACE( "DBGetMail: roleid=%d, mailid=%d.\n", arg->roleid, arg->mail_id);
		try
		{
			StorageEnv::Storage * pmailbox = StorageEnv::GetStorage("mailbox");
			StorageEnv::CommonTransaction txn;
			try{
				GMailBox box;
				time_t now = Timer::GetTime();
				key << arg->roleid;
				value = pmailbox->find(key,txn);
				value >> box;
				box.timestamp = now;
				for(GMailVector::iterator i=box.mails.begin();i!=box.mails.end();i++)
				{
					if(i->header.id==arg->mail_id)
					{
						res->mail = *i;
						res->retcode = 0;
						int mask = (1<<_MA_UNREAD);
						if((i->header.attribute & mask)!=0)
						{
							i->header.attribute ^= mask; 
							i->header.receiver = now;
							pmailbox->insert( key, Marshal::OctetsStream()<<box, txn );
						}
						res->retcode = ERR_SUCCESS;
						return;
					}
				}
				res->retcode = ERR_NOTFOUND;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR,"DBGetMail,roleid=%d,mailid=%d,what=%s\n", arg->roleid, arg->mail_id, e.what() );
			res->retcode = ERR_EXCEPTION;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		//GMailID *arg = (GMailID *)argument;
		//DBGetMailRes *res = (DBGetMailRes *)result;
		//OnGetMail( arg->roleid, arg->mail_id, res->mail );
	}

	void OnTimeout()
	{
	}

};

};
#endif
