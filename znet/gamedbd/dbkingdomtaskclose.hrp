
#ifndef __GNET_DBKINGDOMTASKCLOSE_HPP
#define __GNET_DBKINGDOMTASKCLOSE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbkingdomtaskclosearg"
#include "dbkingdomtaskcloseres"

namespace GNET
{

class DBKingdomTaskClose : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbkingdomtaskclose"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		//DBKingdomTaskCloseArg *arg = (DBKingdomTaskCloseArg *)argument;
		DBKingdomTaskCloseRes *res = (DBKingdomTaskCloseRes *)result;
		try
		{
			StorageEnv::Storage * pkingdom = StorageEnv::GetStorage("kingdom");
			StorageEnv::AtomTransaction txn;
			try{
				Marshal::OctetsStream key;
				key << 0;
				GKingdomInfo data;
				Marshal::OctetsStream(pkingdom->find(key, txn)) >> data;
				Log::formatlog("kingdom", "close task, oldtasktype %d oldissuetime %d", data.tasktype, data.taskissuetime);
				data.taskstatus = KINGDOM_TASK_WAIT_BALANCE;
				data.tasktype = 0;
				pkingdom->insert(key, Marshal::OctetsStream()<<data, txn);
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBKingdomTaskClose, what=%s\n", e.what());
			res->retcode = ERR_EXCEPTION;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBKingdomTaskCloseArg *arg = (DBKingdomTaskCloseArg *)argument;
		// DBKingdomTaskCloseRes *res = (DBKingdomTaskCloseRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
