
#ifndef __GNET_DBSETMAILATTR_HPP
#define __GNET_DBSETMAILATTR_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbsetmailattrarg"
#include "dbsetmailattrres"

namespace GNET
{

class DBSetMailAttr : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbsetmailattr"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBSetMailAttrArg *arg = (DBSetMailAttrArg *)argument;
		DBSetMailAttrRes *res = (DBSetMailAttrRes *)result;

		Marshal::OctetsStream key;

                LOG_TRACE( "DBSetMailAttr, roleid=%d, mailid=%d", arg->mail_id.roleid,arg->mail_id.mail_id);
		try
		{
			StorageEnv::Storage * pmailbox = StorageEnv::GetStorage("mailbox");
			StorageEnv::CommonTransaction txn;
			try{
				GMailBox box;
				key << arg->mail_id.roleid;
				Marshal::OctetsStream(pmailbox->find(key,txn)) >> box;
				for(GMailVector::iterator i=box.mails.begin();i!=box.mails.end();i++)
				{
					if(i->header.id==arg->mail_id.mail_id)
					{
						int mask = (1<<arg->attrib_type);
						if((arg->attrib_value<<arg->attrib_type)!=(i->header.attribute&mask))
						{
							i->header.attribute ^= mask;
							if((i->header.attribute&MAIL_RESERVED)==0)
								i->header.receiver = Timer::GetTime();
							pmailbox->insert( key, Marshal::OctetsStream()<<box, txn );
						}
						res->retcode = 0;
						return;
					}
				}
				res->retcode = ERR_NOTFOUND;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBSetMailAttr, roleid=%d, mailid=%d, what=%s\n", 
					arg->mail_id.roleid, arg->mail_id.mail_id, e.what() );
			res->retcode = ERR_EXCEPTION;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void OnTimeout()
	{
	}

};

};
#endif
