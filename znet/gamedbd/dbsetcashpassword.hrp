
#ifndef __GNET_DBSETCASHPASSWORD_HPP
#define __GNET_DBSETCASHPASSWORD_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbsetcashpasswordarg"
#include "dbsetcashpasswordres"

namespace GNET
{

class DBSetCashPassword : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbsetcashpassword"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBSetCashPasswordArg *arg = (DBSetCashPasswordArg *)argument;
		DBSetCashPasswordRes *res = (DBSetCashPasswordRes *)result;
                Marshal::OctetsStream key, value;

                LOG_TRACE( "DBSetCashPassword, userid=%d,source=%d,password=%d.\n", arg->userid,arg->source,arg->password.size() );

                try
                {
                        StorageEnv::Storage * puser = StorageEnv::GetStorage("user");
                        StorageEnv::CommonTransaction txn;
                        try
                        {
                                if( arg->userid > 0 )
                                {
                                        key << arg->userid;
                                        User     user;
                                        if( !puser->find( key, value, txn ) )
                                        {
                                                res->retcode = -2;
                                                return;
                                        }
                                        value >> user;
                                        user.cash_password.swap(arg->password);
                                        puser->insert( key, Marshal::OctetsStream() << user, txn );
                                        res->retcode = ERR_SUCCESS;
                                }
                        }
                        catch ( DbException e ) { throw; }
                        catch ( ... )
                        {
                                DbException ee( DB_OLD_VERSION );
                                txn.abort( ee );
                                throw ee;
                        }
                }
                catch ( DbException e )
                {
                        Log::log( LOG_ERR, "DBSetCashPassword, userid=%d, what=%s\n", arg->userid, e.what() );
                        res->retcode = -1;
                }
                                                                      
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBSetCashPasswordArg *arg = (DBSetCashPasswordArg *)argument;
		// DBSetCashPasswordRes *res = (DBSetCashPasswordRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
