
#ifndef __GNET_GETFACBASE_HPP
#define __GNET_GETFACBASE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "getfacbasearg"
#include "getfacbaseres"

namespace GNET
{

class GetFacBase : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "getfacbase"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		GetFacBaseArg *arg = (GetFacBaseArg *)argument;
		GetFacBaseRes *res = (GetFacBaseRes *)result;
		LOG_TRACE("getfacbase fid %d", arg->fid);
		try
		{
			StorageEnv::Storage * pfactionbase = StorageEnv::GetStorage("factionbase");
			StorageEnv::CommonTransaction txn;
			try
			{
				GFactionBase base;
				Marshal::OctetsStream key;
				key << arg->fid;
				Marshal::OctetsStream(pfactionbase->find(key, txn)) >> base;
				if (!(base.status_mask & ST_FAC_BASE_OPEN))
				{
					Log::log(LOG_ERR, "faction %d get base, status %d invalid", arg->fid, base.status_mask);
					res->retcode = ERR_EXCEPTION;
				}
				res->value = base;
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "getfacbase, factionid=%d what=%s.", arg->fid, e.what());
			res->retcode = ERR_EXCEPTION;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// GetFacBaseArg *arg = (GetFacBaseArg *)argument;
		// GetFacBaseRes *res = (GetFacBaseRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
