
#ifndef __GNET_DBUNIQUEAUCTIONSAVE_HPP
#define __GNET_DBUNIQUEAUCTIONSAVE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbuniqueauctionsavearg"
#include "dbuniqueauctionsaveres"

namespace GNET
{

class DBUniqueAuctionSave : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbuniqueauctionsave"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBUniqueAuctionSaveArg *arg = (DBUniqueAuctionSaveArg *)argument;
		DBUniqueAuctionSaveRes *res = (DBUniqueAuctionSaveRes *)result;
		try
		{
			StorageEnv::Storage * punique = StorageEnv::GetStorage("uniqueauction");
			StorageEnv::CommonTransaction txn;
			Marshal::OctetsStream key;
			try{
				key << 0;
				punique->insert(key,Marshal::OctetsStream()<<arg->data,txn);
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) 
			{ 
				throw; 
			}
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBUniqueAuctionSave\n", e.what() );
			if(e.get_errno()==DB_LOCK_DEADLOCK)
				res->retcode = ERR_AGAIN;
			else
				res->retcode = ERR_EXCEPTION;
		}

	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBUniqueAuctionSaveArg *arg = (DBUniqueAuctionSaveArg *)argument;
		// DBUniqueAuctionSaveRes *res = (DBUniqueAuctionSaveRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
