
#ifndef __GNET_DBCLEARCONSUMABLE_HPP
#define __GNET_DBCLEARCONSUMABLE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbclearconsumablearg"


namespace GNET
{

class DBClearConsumable : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbclearconsumable"
#undef	RPC_BASECLASS
	static bool IsConsumable(unsigned int id)
	{
		static unsigned int ids[] = {
			1538,
			1807,
			2304,
			2579,
			2580,
			3438,
			3984,
			3985,
			3986,
			3987,
			3988,
			3989,
			3990,
			3991,
			3992,
			3993,
			3994,
			4000,
			4001,
			4002,
			4003,
			4004,
			4005,
			4007,
			4011,
			4012,
			4015,
			4226,
			4227,
			4228,
			4229,
			4230,
			4231,
			4232,
			4233,
			4452,
			4453,
			4454,
			4455,
			4456,
			4457,
			4679,
			4713,
			4714,
			6034,
			6035,
			6036,
			6037,
			6038,
			6039,
			6040,
			6041,
			6042,
			6043,
			6044,
			6045,
			6048,
			6049,
			6050,
			6051,
			6052,
			6053,
			6054,
			6055,
			6056,
			6057,
			6058,
			6059,
			6227,
			6228,
			6229,
			6230,
			6235,
			6236,
			6237,
			6336,
			6337,
			6338,
			6339,
			6340,
			6341,
			6342,
			6343,
			6344,
			6350,
			6358,
			6359,
			6360,
			6367,
			6374,
			6375,
			6376,
			6377,
			6378,
			6379,
			6381,
			6383,
			6384,
			6386,
			6387,
			6388,
			6389,
			6390,
			6430,
			6470,
			6471,
			6472,
			6473,
			6576,
			7226,
			7490,
			7491,
			7540,
			7541,
			7806,
			7807,
			7808,
			7809,
			7810,
			7811,
			7812,
			7813,
			7815,
			7816,
			7817,
			7818,
			7819,
			7824,
			7825,
			7826,
			7916,
			7925,
			7931,
			7937,
			7939,
			7940,
			7941,
			8079,
			10630,
			10631,
			10632,
			10633,
			10634,
			10635,
			10715,
			10722,
			10867,
			10869,
			10872,
			10873,
			10875,
			10876,
			10877,
			10878,
			10879,
			10880,
			10881,
			10882,
			10883,
			10885,
			10886,
			10890,
			10891,
			10892,
			10893,
			10894,
			10895,
			10897,
			10898,
			10914,
			10915,
			10916,
			10917,
			10918,
			10919,
			10921,
			10922,
			10988,
			11169,
			11170,
			11171,
			11300,
			11301,
			11302,
			11303,
			11537,
			11538,
			11539,
			11540,
			11541,
			11542,
			11543,
			11544,
			11545,
			11547,
			11676,
			11677,
			11678,
			11679,
			11681,
			11767,
			11955,
			11957,
			11958,
			11959,
			11960,
			11961,
			12004,
			12005,
			12006,
			12045,
			13306,
			13307,
			13312,
			13313,
			13314,
			13315,
			13316,
			13318,
			13343,
			13344,
			13347,
			13350,
			13356,
			13357,
			13359,
			13476,
			13484,
			13485,
			13486,
			13593,
			13604,
			13606,
			13607,
			13610,
			13612,
			13613,
			13614,
			13615,
			13616,
			13617,
			13900,
			13901,
			13903,
			13904,
			13905,
			13911,
			13912,
			13949,
			13955,
			13967,
			13990,
			13999,
			14000,
			14001,
			14002,
			14003,
			14004,
			14242,
			14243,
			14244,
			15672,
			15676,
			15677,
			15693,
			15694,
			15762,
			15783,
			15784,
			15785,
			15786,
			15819,
			15821,
			15822,
			15823,
			15824,
			15865,
			15866,
			15867,
			15868,
			15869,
			15870,
			16298,
			16302,
			16432,
			16433,
			16434,
			16505,
			16506,
			16507,
			16508,
			16531,
			16549,
			16550,
			16551,
			17075,
			17076,
			17077,
			17829,
			17832,
			17888,
			18276,
			18283,
			18285,
			18306,
			18414,
			18750,
			18794,
			18799,
			18840,
			18848,
			18849,
			18884,
			18885,
			18886,
			18887,
			18888,
			18889,
			18890,
			18904,
			18905,
			18910,
			18911,
			19054,
			19125,
			19127,
			19128,
			19129,
			19130,
			19132,
			19254,
			19257,
			19264,
			19297,
			19315,
			19316,
			19325,
			19326,
			19327,
			19418,
			19434,
			19436,
			19437,
			19438,
			19439,
			19440,
			19441,
			19496,
			19509,
			19510,
			19524,
			19526,
			19552,
			19553,
			19554,
			19555,
			19556,
			19557,
			19558,
			19560,
			19676,
			19680,
			19681,
			19713,
			20090,
			20108,
			20109,
			20128,
			20129,
			20130,
			20131,
			20132,
			20133,
			20134,
			20282,
			20284,
			20480,
			20482,
			20489,
			20490,
			20491,
			20495,
			20496,
			20497,
			20498,
			20499,
			20500,
			20508,
			20509,
			20511,
			20512,
			21118,
			21153,
			21194,
			21199,
			21200,
			21201,
			21208,
			21209,
			21212,
			21276,
			21277,
			21696,
			21697,
			21742,
			21743,
			21744,
			22000,
			22001,
			22002,
			22003,
			22004,
			22005,
			22070,
			22090,
			22091,
			22092,
			22093,
			22094,
			22095,
			22105,
			22120,
			22121,
			22126,
			22127,
			22140,
			22393,
			22421,
			22422,
			22423,
			22424,
			22425,
			22426,
			22484,
			22994,
			22995,
			22996,
			23001,
			23006,
			23121,
			23124,
			23143,
			23144,
			23155,
			23156,
			23158,
			23159,
			23160,
			23162,
			23163,
			23181,
			23187,
			23212,
			23214,
			23217,
			23293,
			23296,
			23321,
			23322,
			23323,
			23324,
			23326,
			23332,
			23336,
			23337,
			23338,
			23344,
			23352,
			23353,
			23360,
			23362,
			23363,
			23421,
			23422,
			23426,
			23428,
			23429,
			23430,
			23860,
			23861,
			23862,
			24339,
			24340,
			24341,
			24342,
			24343,
			24902,
			24993,
			24998,
			24999,
			25000,
			25124,
			25159,
			25302,
			25305,
			25306,
			25307,
			25309,
			25310,
			25311,
			25312,
			25313,
			25326,
			25327,
			25329,
			25330,
			25334,
			25335,
			25336,
			25337,
			25415,
			25417,
			25418,
			25728,
			25729,
			25730,
			25731,
			25732,
			25735,
			25741,
			25745,
			25749,
			25750,
			27150,
			27492,
			27493,
			27494,
			27495,
			27496,
			27497,
			28556,
			28573,
			28588,
			28605,
			28606,
			28607,
			28690,
			28691,
			28692,
			28700,
			28703,
			29997,
			31623,
			31624,
			31834,
			31835,
			31836,
			31837,
			31884,
			31885,
			31886,
			31887,
			31888,
			31889,
			31890,
			31891,
			31892,
			31893,
			31894,
			31895,
			31896,
			31897,
			31947,
			31948,
			31949,
			31950,
			31951,
			31952,
			31953,
			31954,
			31955,
			31956,
			31957,
			31958,
			31959,
			31960,
			32081,
			32169,
			32170,
			32301,
			32302,
			32303,
			32304,
			32305,
			32306,
			32597,
			32605,
			32606,
			32689,
			32692,
			32711,
			32928,
			32929,
			32930,
			33010,
			33011,
			33014,
			33015,
			33019,
			33020,
			33023,
			33118,
			33119,
			33120,
			33121,
			33122,
			33125,
			33156,
			33208,
			33530,
			33531,
			33647,
			33649,
			33650,
			33651,
			33652,
			33653,
			33654,
			33705,
			33822,
			33823,
			34003,
			34004,
			34005,
			34006,
			34007,
			34008,
			34041,
			34054,
			34124,
			34125,
			34126,
			34127,
			34128,
			34285,
			34287,
			34288,
			34295,
			34296,
			34937,
			34942,
			34943,
			34944,
			34945,
			34946,
			34947,
			35164,
			35165,
			35327,
			35328,
			35329,
			35330,
			35332,
			35333,
			35335,
			35336,
			35338,
			35339,
			35360,
			35361,
			35362,
			35363,
			35367,
			35397,
			35439,
			35444,
			39925,
			39926,
			40272,
			40339,
			40344,
			40345,
			40346,
			40528,
			40529,
			40598,
			40599,
			40600,
			40601,
			40602,
			40603,
			40655,
			40670,
			40672,
			40756,
			40757,
			40758,
			40759,
			40760,
			40761,
			40826,
			40928,
			40962,
			41080,
			41289,
			41292,
			41293,
			41294,
			41295,
			41307,
			41511,
			41512,
			41513,
			41515,
			41516,
			41517,
			41518,
			41519,
			41520,
			41521,
			41522,
			41523,
			41524,
			41527,
			41528,
			41533,
			41535,
			41536,
			41537,
			41540,
			41541,
			41542,
			41543,
			41544,
			41545,
			41546,
			41547,
			41548,
			41549,
			41550,
			41551,
			41552,
			41553,
			41554,
			41556,
			41557,
			41558,
			41559,
			41560,
			41561,
			41562,
			41563,
			41564,
			41565,
			41566,
			41567,
			41568,
			41569,
			41570,
			41571,
			41572,
			41573,
			41574,
			41575,
			41576,
			41577,
			41578,
			41579,
			41580,
			41651,
			41652,
			41653,
			42127,
			42148,
			42150,
			42337,
			42338,
			42353,
			42402,
			42404,
			42425,
			42426,
			42431,
			42432,
			42437,
			42438,
			42565,
			42566,
			42567,
			42568,
			42570,
			42571,
			42600,
			42601,
			42665,
			42707,
			42771,
			42772,
			42773,
			42784,
			42786,
			42862,
			42866,
			42867,
			42868,
			42881,
			42884,
			42886,
			43277,
			43278,
			43402,
			43403,
			43475,
			43570,
			44149,
			44150,
			44151,
			44403,
			44469,
			44485,
			44486,
			44487,
			44496,
			44638,
			23360, 
			44768, 
			44775, 
			44778, 
			44769, 
			44777, 
			44779, 
			44764, 
			50621, 
			49381, 
			49380, 
			49600, 
			49526, 
			49527, 
			49290, 
			42403, 
			49345, 
			49343, 
			14063, 
			43944, 
			49347, 
			49348, 
			49349, 
			49350, 
			50824, 
			50823, 
			50825, 
			50826, 
			50827, 
			50828, 
			50829, 
			50830, 
			33056, 
			49344, 
			49358, 
			51049, 
			51055, 
			51061, 
			51050, 
			51056, 
			51062, 
			51047, 
			51053, 
			51059, 
			51048, 
			51054, 
			51060, 
			51097, 
			51082, 
			51203, 
			51198, 
			51267, 
			51264, 
			51265, 
			51266, 
			51268, 
			51444, 
			51445, 
			51446, 
			51447, 
			51448, 
			51449, 
			51452, 
			51443, 
			44823, 
			33133, 
			51416, 
			52346, 
			52344, 
			52343, 
			52342, 
			52352, 
			52257, 
			52258, 
			52259, 
			52475, 
			52455, 
			52438, 
			52439, 
			52440, 
			52441, 
			52442, 
			52443, 
			52444, 
			52471, 
			52469, 
			52680, 
			52679, 
			52678, 
			52676, 
			33134, 
			52639, 
			53558, 
			54054, 
			53988, 
			54141, 
			32690, 
			54051, 
			53558, 
			54858, 
			54865, 
			54852, 
			54854, 
			54856, 
			54853, 
			54855, 
			54857, 
			53571, 
			53573, 
			54886, 
			54890, 
			54891, 
			54867, 
			54868, 
			54869, 
			54870, 
			54892, 
			54929, 
			54928, 
			55054, 
			55294, 
			55296, 
			55297, 
			55298, 
			55300, 
			55301, 
			55068, 
			55518, 
			55530, 
			55531, 
			55532, 
			55533, 
			55534, 
			55535, 
			22343, 
			55471, 
			49370, 
			41668, 
			33133, 
			51138, 
			22460, 
			52377, 
			55544, 
			55541, 
		};
		for(size_t i=0;i<sizeof(ids)/sizeof(int);i++)
		{
			if(ids[i]==id)
				return true;
		}
		return false;
	}
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBClearConsumableArg *arg = (DBClearConsumableArg *)argument;
		RpcRetcode *res = (RpcRetcode *)result;
		unsigned int cash_delta = 0;
		std::map<int,int> items;
		LOG_TRACE( "DBClearConsumable, userid=%d logintime=%d dryrun=%d", arg->userid, arg->logintime, arg->dryrun);
		try
		{
			StorageEnv::Storage * puser = StorageEnv::GetStorage("user");
			StorageEnv::Storage * pinventory = StorageEnv::GetStorage("inventory");
			StorageEnv::Storage * pstorehouse = StorageEnv::GetStorage("storehouse");
			StorageEnv::AtomTransaction txn;
			Marshal::OctetsStream kuser, value;
			try
			{
				kuser << arg->userid;
				User user;
				if(!puser->find(kuser, value, txn))
				{
					res->retcode = ERR_DATANOTFIND;
					Log::log( LOG_ERR, "DBClearConsumable, userid=%d not found");
					return;
				}
				value >> user; 
				cash_delta = user.cash_add+user.cash_buy-user.cash_sell-user.cash_used;
				int roleid = user.logicuid;
				for(int i=1;i<0x10000;i<<=1,roleid++)
				{
					if((i&user.rolelist)==0)
						continue;
					GRolePocket pocket;
					GRoleStorehouse store;
					Marshal::OctetsStream key;
					key << roleid;
					Marshal::OctetsStream(pinventory->find(key,txn))>>pocket;
					for (GRoleInventoryVector::iterator it=pocket.items.begin();it!=pocket.items.end();)
					{
						if(IsConsumable(it->id))
						{
							items[it->id] += it->count;
							it = pocket.items.erase(it);
						}
						else
							++it;
					}
					Marshal::OctetsStream(pstorehouse->find(key,txn))>>store;
					for (GRoleInventoryVector::iterator it=store.items.begin();it!=store.items.end();)
					{
						if(IsConsumable(it->id))
						{
							items[it->id] += it->count;
							it = store.items.erase(it);
						}
						else
							++it;
					}
				}
				res->retcode = 0;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBClearConsumable, userid=%d, what=%s\n", arg->userid, e.what() );
			res->retcode = -1;
		}
		if(cash_delta||items.size())
		{
			std::string str;
			for(std::map<int,int>::iterator it=items.begin();it!=items.end();++it)
			{
				char buf[32];
				sprintf(buf, "%d:%d;", it->first, it->second);
				str += buf;
			}
			Log::formatlog("clear360","userid=%d:logintime=%d:cash_delta=%d;%s",arg->userid,arg->logintime,cash_delta,str.c_str());
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void OnTimeout()
	{
	}


};

};
#endif
