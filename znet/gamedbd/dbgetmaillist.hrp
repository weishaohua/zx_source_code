
#ifndef __GNET_DBGETMAILLIST_HPP
#define __GNET_DBGETMAILLIST_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "roleid"
#include "gmailheader"
#include "gmail"
#include "gmailbox"
#include "dbgetmaillistres"

namespace GNET
{

class DBGetMailList : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbgetmaillist"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		RoleId *arg = (RoleId *)argument;
		DBGetMailListRes *res = (DBGetMailListRes *)result;

		Marshal::OctetsStream key, value;

		LOG_TRACE( "DBGetMailList: roleid=%d.\n", arg->id);
		try
		{
			StorageEnv::Storage * pmailbox = StorageEnv::GetStorage("mailbox");
			StorageEnv::CommonTransaction txn;
			try{
				GMailBox box;
				bool changed = false;
				key << arg->id;
				if(pmailbox->find(key,value,txn))
				{
					value >> box;
					time_t now = Timer::GetTime();
					if(now-box.timestamp> 259200)
					{
						box.timestamp = now;
						changed = true;
					}
					for(GMailVector::iterator i=box.mails.begin();i!=box.mails.end();)
					{
						bool todelete = false;
						if((i->header.attribute&(1<<_MA_PRESERVE))==0)
						{
							if(i->header.sndr_type!=_MST_WEB && now-i->header.send_time>604800)
								todelete = true;
						}
						if(todelete)
						{
							changed = true;
							i = box.mails.erase(i);
						}
						else
						{
							res->maillist.push_back(i->header);
							i++;
						}
					}
					if(changed)
						pmailbox->insert( key, Marshal::OctetsStream()<<box, txn );
				}
				else
				{
					res->maillist.clear();
				}
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException e( DB_OLD_VERSION );
				txn.abort( e );
				throw e;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBGetMailList, roleid=%d, what=%s\n", arg->id, e.what() );
			res->retcode = ERR_MS_AGAIN;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		//RoleId *arg = (RoleId *)argument;
		//DBGetMailListRes *res = (DBGetMailListRes *)result;

		//OnGetMailList( arg->id, res->maillist );
	}

	void OnTimeout()
	{
	}

};

};
#endif
