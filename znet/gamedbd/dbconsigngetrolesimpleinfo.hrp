
#ifndef __GNET_DBCONSIGNGETROLESIMPLEINFO_HPP
#define __GNET_DBCONSIGNGETROLESIMPLEINFO_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbconsigngetrolesimpleinfoarg"
#include "dbconsigngetrolesimpleinfores"
//#include ""
namespace GNET
{

class DBConsignGetRoleSimpleInfo : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbconsigngetrolesimpleinfo"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBConsignGetRoleSimpleInfoArg *arg = (DBConsignGetRoleSimpleInfoArg *)argument;
		DBConsignGetRoleSimpleInfoRes *res = (DBConsignGetRoleSimpleInfoRes *)result;
		LOG_TRACE( "dbconsigngetrolesimpleinfo, userid=%d.\n", arg->userid );

		try
		{
			StorageEnv::Storage * puser = StorageEnv::GetStorage("user");
			StorageEnv::Storage * pbase = StorageEnv::GetStorage("base");
			StorageEnv::Storage * pstatus = StorageEnv::GetStorage("status");
			StorageEnv::AtomTransaction txn;
			try
			{
				User user;
				Marshal::OctetsStream(puser->find( Marshal::OctetsStream()<<arg->userid, txn )) >> user;
				if( 0 != user.logicuid )
				{
					RoleList	rolelist(user.rolelist);
					int roleid;
					while( (roleid = rolelist.GetNextRole()) >= 0 )
					{
						GRoleBase base;
						int r = user.logicuid+roleid;
						Marshal::OctetsStream(pbase->find( Marshal::OctetsStream() << r, txn )) >> base;
						GRoleStatus status;
						Marshal::OctetsStream(pstatus->find( Marshal::OctetsStream() << r, txn )) >> status;
						if(base.status == _ROLE_STATUS_NORMAL)
							res->roles.push_back(RoleSimpleInfo(base.id, status.level, -1, base.gender, base.name));
					}
				}
				res->retcode = ERR_SUCCESS;
			}
			catch ( DbException e ) { throw; }
			catch ( ... )
			{
				DbException ee( DB_OLD_VERSION );
				txn.abort( ee );
				throw ee;
			}
		}
		catch ( DbException e )
		{
			Log::log( LOG_ERR, "DBConsignGetRoleSimpleInfo, userid=%d, what=%s\n", arg->userid, e.what() );
			res->retcode = ERR_DATANOTFIND;
		}

	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// DBConsignGetRoleSimpleInfoArg *arg = (DBConsignGetRoleSimpleInfoArg *)argument;
		// DBConsignGetRoleSimpleInfoRes *res = (DBConsignGetRoleSimpleInfoRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
