
#ifndef __GNET_DBGETMAIL_HPP
#define __GNET_DBGETMAIL_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "gmailid"
#include "gmailheader"
#include "gmail"
#include "dbgetmailres"
#include "postoffice.h"
#include "getmail_re.hpp"
#include "mapuser.h"
namespace GNET
{

class DBGetMail : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbgetmail"
#undef	RPC_BASECLASS
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// GMailID *arg = (GMailID *)argument;
		// DBGetMailRes *res = (DBGetMailRes *)result;
	}
	void SendResult(int retcode,const GMailID& arg,const GMail& mail=GMail() )
	{
		Thread::RWLock::RDScoped l(UserContainer::GetInstance().GetLocker());
		PlayerInfo * pinfo = UserContainer::GetInstance().FindRoleOnline( arg.roleid );
		if ( NULL!=pinfo )
			GDeliveryServer::GetInstance()->Send( pinfo->linksid, GetMail_Re( retcode,arg.roleid,pinfo->localsid,mail));
	}
	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		GMailID *arg = (GMailID *)argument;
		DBGetMailRes *res = (DBGetMailRes *)result;
		DEBUG_PRINT("dbgetmail. rpc return. retcode=%d,roleid=%d,mailid=%d",
				res->retcode,arg->roleid,res->mail.header.id);
		if ( res->retcode == ERR_SUCCESS )
		{
			NameManager::GetInstance()->FindName(res->mail.header.sender, res->mail.header.sender_name);
			SendResult( ERR_SUCCESS,*arg,res->mail );
			PostOffice::GetInstance().MarkReadMail( arg->roleid,res->mail.header.id );
		}
		else
			SendResult( res->retcode,*arg );
	}

	void OnTimeout(Rpc::Data *argument)
	{
		GMailID *arg = (GMailID *)argument;
		Log::log(LOG_ERR,"dbgetmail: timeout. roleid=%d,mailid=%d", arg->roleid,arg->mail_id);
		SendResult( ERR_TIMEOUT,*arg );
	}

};

};
#endif
