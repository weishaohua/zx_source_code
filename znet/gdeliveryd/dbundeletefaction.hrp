
#ifndef __GNET_DBUNDELETEFACTION_HPP
#define __GNET_DBUNDELETEFACTION_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "factionid"
#include "delfactionres"
#include "factiondismiss_re.hpp"

namespace GNET
{

class DBUndeleteFaction : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbundeletefaction"
#undef	RPC_BASECLASS

	int localsid, linksid;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		FactionId *arg = (FactionId *)argument;
		DelFactionRes *res = (DelFactionRes *)result;

		if (res->retcode == ERR_SUCCESS)
		{
			FactionManager::Instance()->SetDelete(arg->fid, 0);
		}
		else
		{
			FactionDismiss_Re re;
			re.retcode = res->retcode;
			re.localsid = localsid;
			re.scale = 0;
			re.oper = 0;
			GDeliveryServer::GetInstance()->Send(linksid, re);
		}

	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
