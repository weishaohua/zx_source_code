
#ifndef __GNET_COMBATINVITE_HPP
#define __GNET_COMBATINVITE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "combatinvitearg"
#include "combatinviteres"
#include "combatcontrol.hpp"
#include "gproviderserver.hpp"
#include "combatmanager.h"
#include "combatchallenge_re.hpp"

namespace GNET
{

class CombatInvite : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "combatinvite"
#undef	RPC_BASECLASS
	int attacker;
	int defender;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// CombatInviteArg *arg = (CombatInviteArg *)argument;
		// CombatInviteRes *res = (CombatInviteRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		CombatInviteArg *arg = (CombatInviteArg *)argument;
		CombatInviteRes *res = (CombatInviteRes *)result;
		DEBUG_PRINT("CombatInviteRes, roleid=%d, factionid=%d, retcode=%d", arg->roleid, arg->factionid,
				res->retcode);
		if(res->retcode==0)
			CombatManager::Instance()->AcceptChallenge(attacker, defender);
		else
			CombatManager::Instance()->RefuseChallenge(attacker, defender);
	}

	void OnTimeout()
	{
	}

};

};
#endif
