
#ifndef __GNET_GETFRIENDLIST_HPP
#define __GNET_GETFRIENDLIST_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#ifdef USE_BDB
#include "dbbuffer.h"
#endif
#include "roleid"
#include "ggroupinfo"
#include "gfriendinfo"
#include "friendlistres"
#include "friendstatus.hpp"
#include "getfriends_re.hpp"
#include "mapuser.h"
#include "gtplatformagent.h"
#include "friendnamechange.hpp"

namespace GNET
{

class GetFriendList : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "getfriendlist"
#undef	RPC_BASECLASS
	int roleid;
	bool bUpdateFriend;// true 更新好友的状态， false 更新我的状态给好友 
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
#ifdef USE_BDB
		RoleId *arg = (RoleId *)argument;
		RoleBaseRes *res = (RoleBaseRes *)result;
		Marshal::OctetsStream key, value;
		key << *arg;
		res->retcode = DBBuffer::buf_find( "friends", key, value );
		if( 0 == res->retcode )
			value >> res->value;
#endif
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		//LOG_TRACE("recv getfriendlist,%d", bUpdateFriend);
		RoleId *arg = (RoleId *)argument;
		FriendListRes *res = (FriendListRes *)result;

		GDeliveryServer* dsm = GDeliveryServer::GetInstance();
		Thread::RWLock::WRScoped l(UserContainer::GetInstance().GetLocker());
		PlayerInfo * pinfo = UserContainer::GetInstance().FindRole(arg->id);
		if (NULL == pinfo || pinfo->friend_ver!=-1)
			return;
		LOG_TRACE("recv getfriendlist online, friendsize:%d", res->value.friends.size());
		pinfo->friend_ver = 0;
		pinfo->groups.swap(res->value.groups);

		NameManager * name_man = NameManager::GetInstance();
		pinfo->friends.swap(res->value.friends);
		GFriendInfoVector::iterator it = pinfo->friends.begin(), iv = pinfo->friends.end();
		for(; it != iv; ++it)
		{
			Octets newname;
			if (name_man->FindName(it->rid, newname) && newname != it->name)
			{
				dsm->Send(pinfo->linksid, FriendNameChange(it->rid, it->name, newname, pinfo->localsid));
				it->name = newname;
				pinfo->friend_ver++;
			}
		}

		pinfo->enemies.swap(res->value.enemies);
		GEnemyInfoVector::iterator eit = pinfo->enemies.begin(), eiv = pinfo->enemies.end();
		for(; eit != eiv; ++eit)
		{
			Octets newname;
			if (name_man->FindName(eit->rid, newname) && newname != eit->name)
			{
				eit->name = newname;
				pinfo->friend_ver++;
			}
		}

		FriendStatus stat(arg->id, pinfo->gameid, 0);
		GetFriends_Re re;
		re.reserved = 0;
		re.roleid = arg->id;

		GFriendInfoVector* plist = &(pinfo->friends);
		GTPlatformAgent::GetFriendStatus(arg->id,*plist);
		char counter = 0;
		for(GFriendInfoVector::iterator i = plist->begin();i!=plist->end();i++)
		{
			GClientFriendInfo friendinfo;
			
			int _sendrole = bUpdateFriend ? i->rid : arg->id;
			bool _bRemoteOnline = UserContainer::GetInstance().IsRemoteOnline(_sendrole);
			PlayerInfo * ruser = UserContainer::GetInstance().FindRole(i->rid);
			if(NULL != ruser && (ruser->ingame || _bRemoteOnline))
			{
				LOG_TRACE("GetFriendList send FriendStatus online");
				for(GFriendInfoVector::iterator k=ruser->friends.begin(),ke=ruser->friends.end();k!=ke;++k)
				{
					if(k->rid==(int)(arg->id))
					{
						LOG_TRACE("GetFriendList Send k.rid == roleid, bUpdateFriend:%d", bUpdateFriend);

						if(!GDeliveryServer::GetInstance()->IsCentralDS() && _bRemoteOnline)
						{
							LOG_TRACE("GetFriendlist send FriendStatus 500");
							stat.localsid = ruser->localsid;
							stat.lineid = REMOTE_ONLINE_FLAG;
							i->lineid = REMOTE_ONLINE_FLAG;
							friendinfo.lineid = REMOTE_ONLINE_FLAG;
							dsm->Send(ruser->linksid,stat);
							break;
						}
						else
						{
							LOG_TRACE("GetFriendlist send FriendStatus %d", ruser->gameid);
							stat.localsid = ruser->localsid;
							stat.lineid = pinfo->gameid;
							i->lineid = ruser->gameid;
							friendinfo.lineid = ruser->gameid;
							dsm->Send(ruser->linksid,stat);
							break;
						}
					}
				}
			}
			else
			{
				//LOG_TRACE("GetFriendlist send FriendStatus -1");
				i->lineid = -1;
				friendinfo.lineid = -1;
			}
			counter++;
                        friendinfo.rid = i->rid;
                        friendinfo.gid = i->gid;
                        friendinfo.name = i->name;
                        re.friends.push_back(friendinfo);		
		}

		re.groups = pinfo->groups;
//		re.friends = pinfo->friends;
		re.localsid = pinfo->localsid;
		dsm->Send(pinfo->linksid, re);
	}

	void OnTimeout()
	{
		DEBUG_PRINT("gdelivery::getfriends: timeout roleid=%d.\n", roleid);
	}

};

};
#endif
