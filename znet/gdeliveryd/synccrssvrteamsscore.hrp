
#ifndef __GNET_SYNCCRSSVRTEAMSSCORE_HPP
#define __GNET_SYNCCRSSVRTEAMSSCORE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "synccrssvrteamsscorearg"
#include "synccrssvrteamsscoreres"

#include "crssvrteamsmanager.h"

namespace GNET
{

class SyncCrssvrTeamsScore : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "synccrssvrteamsscore"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// SyncCrssvrTeamsScoreArg *arg = (SyncCrssvrTeamsScoreArg *)argument;
		// SyncCrssvrTeamsScoreRes *res = (SyncCrssvrTeamsScoreRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		SyncCrssvrTeamsScoreArg *arg = (SyncCrssvrTeamsScoreArg *)argument;
		SyncCrssvrTeamsScoreRes *res = (SyncCrssvrTeamsScoreRes *)result;

		LOG_TRACE("SyncCrssvrTeamsScore, roleid=%d, retcode=%d, ct_score=%d, ct_last_max_score=%d, ct_last_battle_count=%d", 
				arg->roleid, res->retcode, arg->ct_score, arg->data_score.ct_last_max_score, arg->ct_last_battle_count);
		if(res->retcode == ERR_SUCCESS)
		{
			CrssvrTeamsManager::Instance()->SetRoleDataGroup(arg->roleid, KEY_DATAGOURP_ROLE_CT_SCORE, arg->ct_score);	
			CrssvrTeamsManager::Instance()->SetRoleDataGroup(arg->roleid, KEY_DATAGOURP_ROLE_CT_LAST_MAX_SCORE, arg->data_score.ct_last_max_score);
			CrssvrTeamsManager::Instance()->SetRoleDataGroup(arg->roleid, KEY_DATAGOURP_ROLE_CT_LAST_BATTLE_COUNT, arg->ct_last_battle_count);
		}
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
