
#ifndef __GNET_DBCREATEROLE_HPP
#define __GNET_DBCREATEROLE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "groleinventory"
#include "dbcreaterolearg"
#include "dbcreateroleres"
#include "gamedbclient.hpp"
#include "gdeliveryserver.hpp"
#include "createrole_re.hpp"
#include "mapuser.h"
#include "dbdeleterole.hrp"
#include "gamedbclient.hpp"

#include "postcreaterole.hrp"
#include "uniquenameclient.hpp"

#define MAX_REXMIT_TIME	3
namespace GNET
{

class DBCreateRole : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbcreaterole"
#undef	RPC_BASECLASS
	unsigned int save_localsid;
	unsigned int save_link_sid;
	unsigned int nRexmitTime;
	
	void NotifyUniqueNameSrv(bool blSuccess,GDeliveryServer* dsm,int userid, int roleid,const Octets& rolename)
	{
		PostCreateRole* rpc=(PostCreateRole*) Rpc::Call( RPC_POSTCREATEROLE, PostCreateRoleArg((char)blSuccess,userid,dsm->zoneid,roleid,rolename));
		DEBUG_PRINT("dbcreaterole::send PostCreateRole to uniqueserver. roleid=%d,zoneid=%d,rolename(sz:%d)\n",
			roleid,dsm->zoneid,rolename.size());
		UniqueNameClient::GetInstance()->SendProtocol(rpc);
	}
	void SendErr2Client( int retcode )
	{
		GDeliveryServer* dsm=GDeliveryServer::GetInstance();
		dsm->Send( save_link_sid, CreateRole_Re(retcode,_ROLE_INVALID,save_localsid));		
	}
	void CreateRollBack(DBCreateRoleArg *arg)
	{
		DBDeleteRole * rpc = (DBDeleteRole*)Rpc::Call(RPC_DBDELETEROLE,DBDeleteRoleArg(arg->roleid,true));
		rpc->isbatch = false;
		GameDBClient::GetInstance()->SendProtocol( rpc );
	}
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBCreateRoleArg *arg = (DBCreateRoleArg *)argument;
		// DBCreateRoleRes *res = (DBCreateRoleRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBCreateRoleArg *arg = (DBCreateRoleArg *)argument;
		DBCreateRoleRes *res = (DBCreateRoleRes *)result;
		
		GDeliveryServer* dsm=GDeliveryServer::GetInstance();
		Thread::RWLock::WRScoped l(UserContainer::GetInstance().GetLocker());
		
		NotifyUniqueNameSrv( (res->retcode==ERR_SUCCESS) || (res->retcode==ERR_DUPLICATE_ROLEID), dsm,
				arg->userid, arg->roleid, (res->retcode==ERR_DUPLICATE_ROLEID) ? res->roleinfo.name : arg->roleinfo.name);	
		if (res->retcode==ERR_DUPLICATE_ROLEID) 
			res->retcode=ERR_DUPLICATRECORD; 
		Octets account;
		int ip = 0;
		UserInfo* userinfo = UserContainer::GetInstance().FindUser(arg->userid);
		if (NULL != userinfo) 
		{
			account = userinfo->account;
			ip = userinfo->ip;
		}
		if (res->retcode == ERR_SUCCESS)
		{
			NameManager::GetInstance()->ClearNameHistoryCache(arg->roleinfo.name);
			GTPlatformAgent::CreateRole(arg->roleid, arg->userid, res->roleinfo);
			Log::formatlog("createrole","roleid=%d:occupation=%d:gender=%d:userid=%d:account=%.*s:ip=%s", arg->roleid,
					arg->roleinfo.occupation, arg->roleinfo.gender, arg->userid, account.size(), (char*)account.begin(),
					inet_ntoa(*(struct in_addr*)&ip));
		}
		if (NULL==userinfo)
			return;
		if (res->retcode == ERR_SUCCESS)
		{
			CreateRole_Re re(ERR_SUCCESS,res->roleid,save_localsid,RoleInfo(), res->real_referrer, res->refretcode);
			userinfo->rolelist=UserInfo::RoleList(res->rolelist);
			userinfo->logicuid = arg->logicuid;
			//如果第一次创建的角色绑定了上线，要更新到userinfo中
			if (res->real_referrer > 0)
				userinfo->real_referrer = res->real_referrer;

			UserContainer::GetInstance().InsertLogicuid(arg->userid, userinfo->logicuid);

			RoleInfoCache::Instance().Insert(res->roleid, res->roleinfo);
			GRoleInfo roleinfo_chop = RoleInfoCache::ChopRoleInfo(res->roleinfo);
			RoleInfoCache::ConvertRoleInfo(roleinfo_chop, re.roleinfo);
			
			dsm->Send(save_link_sid,re);
			STAT_DAY("role-create",1);
		}
		else
		{
			Log::log(LOG_ERR,"gdelivery::dbcreaterole: failed. roleid=%d, retcode=%d\n",
				arg->roleid,res->retcode);
			if (res->retcode!=ERR_DUPLICATRECORD && res->retcode!=ERR_NOFREESPACE
				&& res->retcode!=REF_ERR_REFERRERNOTINSERVER 
				&& res->retcode!=REF_ERR_REFERRERNOTINDISTRICT
				&& res->retcode!=REF_ERR_INVALIDSPREADCODE)
				res->retcode=ERR_CREATEROLE;
			dsm->Send(save_link_sid,CreateRole_Re(res->retcode,_ROLE_INVALID,save_localsid));
		}
	}

	void OnTimeout(Rpc::Data *argument)
	{
		DBCreateRoleArg *arg = (DBCreateRoleArg *)argument;
		Log::log(LOG_ERR,"gdelivery::dbcreaterole:Create role failed(timeout),roleid=%d.",
			((DBCreateRoleArg*)argument)->roleid);
		SendErr2Client(ERR_TIMEOUT);
		CreateRollBack( arg );
		NotifyUniqueNameSrv( false, GDeliveryServer::GetInstance(), arg->userid, arg->roleid, arg->roleinfo.name);	

	}

};

};
#endif
