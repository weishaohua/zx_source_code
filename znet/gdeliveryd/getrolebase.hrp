/* deprecated */
#ifndef __GNET_GETROLEBASE_HPP
#define __GNET_GETROLEBASE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"
#ifdef USE_BDB
#include "dbbuffer.h"
#endif
#include "roleid"
#include "rolebaseres"
#include "playerbriefinfo"

#include "playerbaseinfo_re.hpp"
#include "playerbaseinfo2_re.hpp"
#include "getplayerbriefinfo_re.hpp"
#include "gdeliveryserver.hpp"
#include "gamedbclient.hpp"

#include "mapuser.h"
#include "conv_charset.h"

//define response type
#define _RESPONSE_BASEINFO	1
#define _RESPONSE_GET_PBI	2
#define _RESPONSE_BASEINFO2	3

namespace GNET
{

class GetRoleBase : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "getrolebase"
#undef	RPC_BASECLASS
	int response_type;
	int roleid;
	int cloneid;
	unsigned int localsid;
	unsigned int link_sid;
	unsigned char reason;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		RoleId *arg = (RoleId *)argument;
		RoleBaseRes *res = (RoleBaseRes *)result;
		
		GDeliveryServer* dsm=GDeliveryServer::GetInstance();
		if(res->retcode==ERR_DATANOTFIND)
		{
			RoleInfoCache::Instance().SetInexistent(arg->id);
			if (dsm->IsCentralDS() && response_type==_RESPONSE_GET_PBI)
			{
				GetPlayerBriefInfo_Re re(ERR_SUCCESS, roleid, localsid, PlayerBriefInfoVector(), reason);
				char * str = "xx";
				Octets name_u2, username = Octets(str, strlen(str));
				CharsetConverter::conv_charset_t2u(username, name_u2);
				re.playerlist.add(PlayerBriefInfo(arg->id, 0, name_u2, 0));
				dsm->Send(link_sid, re);
			}
			return;
		}
		//LOG_TRACE( "******GetRoleBase: roleid=%d,retcode=%d,reason=%d,localsid=%d,link_sid=%d,type=%d",arg->id,res->retcode,reason,localsid,link_sid,response_type);
		if(res->retcode!=ERR_SUCCESS)
			return;
		RoleInfoCache::Instance().Insert(arg->id,res->value);

		switch (response_type)
		{
			case _RESPONSE_BASEINFO:
				{
					PlayerBaseInfo_Re re(ERR_SUCCESS,roleid,localsid,GRoleBase());
					re.player.id = res->value.id;
					re.player.name = res->value.name;
					re.player.faceid = res->value.faceid;
					re.player.hairid = res->value.hairid;
					re.player.gender = res->value.gender;
					re.player.fashionid = res->value.fashionid;
					dsm->Send(link_sid,re);
				}
				break;
			case _RESPONSE_BASEINFO2:
				{
					PlayerBaseInfo2_Re re(ERR_SUCCESS,roleid,localsid,cloneid,GRoleBase());
					re.player.id = res->value.id;
					re.player.name = res->value.name;
					re.player.faceid = res->value.faceid;
					re.player.hairid = res->value.hairid;
					re.player.gender = res->value.gender;
					re.player.fashionid = res->value.fashionid;
					dsm->Send(link_sid,re);
				}
				break;
			case _RESPONSE_GET_PBI:
				{
					GetPlayerBriefInfo_Re re(ERR_SUCCESS,roleid,localsid,PlayerBriefInfoVector(),reason);
					re.playerlist.add(PlayerBriefInfo(res->value.id,0,res->value.name,res->value.gender));
					dsm->Send(link_sid,re);
				}	
				break;	
		}
	}

	void OnTimeout(Rpc::Data *argument)
	{
	}

};

};
#endif
