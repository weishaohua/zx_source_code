
#ifndef __GNET_GMSETGAMEATTRI_HPP
#define __GNET_GMSETGAMEATTRI_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "gmsetgameattriarg"
#include "gmsetgameattrires"

#include "mapgameattr.h"
#include "querygameserverattr_re.hpp"
#include "gproviderserver.hpp"
#include "privilege.hxx"
#include "maplinkserver.h"
#include "announceserverattribute.hpp"
namespace GNET
{

class GMSetGameAttri : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "gmsetgameattri"
#undef	RPC_BASECLASS
/*
	void AnnounceLink()
	{
		LinkServer::GetInstance().BroadcastProtocol(
				AnnounceServerAttribute( GDeliveryServer::GetInstance()->serverAttr.GetAttr() )
			);
	}
	*/
	static void UpdateServerAttr( unsigned char attribute,const Octets& value)
	{
		try
		{
			GDeliveryServer* dsm=GDeliveryServer::GetInstance();
			Marshal::OctetsStream os(value);
			unsigned char attr = 0;
			os >> attr;
			switch ( attribute )
			{
				case Privilege::PRV_MULTIPLE_EXP:
				{
					dsm->serverAttr.SetMultipleExp(attr);
					break;
				}
				case Privilege::PRV_DOUBLEMONEY:
				{
					dsm->serverAttr.SetDoubleMoney(attr);
					break;
				}
				case Privilege::PRV_DOUBLEOBJECT:
				{
					dsm->serverAttr.SetDoubleObject(attr);
					break;
				}
				case Privilege::PRV_DOUBLESP:
				{
					dsm->serverAttr.SetDoubleSP(attr);
					break;
				}
				case Privilege::PRV_LAMBDA:
				{
					dsm->serverAttr.SetLambda(attr);
					break;
				}
			}//end of switch	
			//AnnounceLink();
			LinkServer::GetInstance().BroadcastProtocol(
					AnnounceServerAttribute( GDeliveryServer::GetInstance()->serverAttr.GetAttr() ));
		}
		catch ( Marshal::Exception e )
		{ }
	}
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		GMSetGameAttriArg *arg = (GMSetGameAttriArg *)argument;
		GMSetGameAttriRes *res = (GMSetGameAttriRes *)result;
		if (!GameAttrMap::IsValid(arg->attribute, arg->value))
		{
			res->retcode = ERR_GENERAL;
		}
		else
		{
			if ( GameAttrMap::Put( arg->attribute,arg->value ) )
			{
				res->retcode=ERR_SUCCESS;
				QueryGameServerAttr_Re qgsa_re;
				qgsa_re.attr.push_back( GameAttr(arg->attribute,arg->value) );
				GProviderServer::GetInstance()->BroadcastProtocol( qgsa_re );
				UpdateServerAttr( arg->attribute,arg->value );
				char content[256];
				sprintf(content,"SetGameAttr: attribute=%d,value.size=%d",arg->attribute,arg->value.size());
				Log::gmoperate(arg->gmroleid,arg->attribute,content);
			}
			else
				res->retcode=ERR_GENERAL;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// TODO
		// GMSetGameAttriArg *arg = (GMSetGameAttriArg *)argument;
		// GMSetGameAttriRes *res = (GMSetGameAttriRes *)result;
	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
