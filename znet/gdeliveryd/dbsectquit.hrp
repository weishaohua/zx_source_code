
#ifndef __GNET_DBSECTQUIT_HPP
#define __GNET_DBSECTQUIT_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbsectquitarg"
#include "dbsectquitres"

namespace GNET
{

class DBSectQuit : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbsectquit"
#undef	RPC_BASECLASS
	char reason;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBSectQuitArg *arg = (DBSectQuitArg *)argument;
		DBSectQuitRes *res = (DBSectQuitRes *)result;
		DEBUG_PRINT("DBSectQuit, retcode=%d, sectid=%d, disciple=%d", res->retcode, arg->master, arg->disciple);
		if (res->retcode == ERR_SUCCESS)
		{
			SectManager::Instance()->OnQuit(arg->master,arg->disciple, res->name, reason);
			GRoleInfo* info = RoleInfoCache::Instance().Get(arg->disciple);
			if(info)
				info->sectid = 0;
		}
	}

	void OnTimeout()
	{
	}

};

};
#endif
