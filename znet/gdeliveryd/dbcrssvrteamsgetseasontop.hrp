
#ifndef __GNET_DBCRSSVRTEAMSGETSEASONTOP_HPP
#define __GNET_DBCRSSVRTEAMSGETSEASONTOP_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbcrssvrteamsgetseasontoparg"
#include "dbcrssvrteamsgetseasontopres"

namespace GNET
{

class DBCrssvrTeamsGetSeasonTop : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbcrssvrteamsgetseasontop"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBCrssvrTeamsGetSeasonTopArg *arg = (DBCrssvrTeamsGetSeasonTopArg *)argument;
		// DBCrssvrTeamsGetSeasonTopRes *res = (DBCrssvrTeamsGetSeasonTopRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBCrssvrTeamsGetSeasonTopArg *arg = (DBCrssvrTeamsGetSeasonTopArg *)argument;
		DBCrssvrTeamsGetSeasonTopRes *res = (DBCrssvrTeamsGetSeasonTopRes *)result;

		LOG_TRACE("DBCrssvrTeamsGetSeasonTop, retcode=%d, roleid=%d, updatetime=%d", res->retcode, arg->roleid, res->seasontop.updatetime);
		if(res->retcode==ERR_SUCCESS)
		{
			GDeliveryServer* dsm = GDeliveryServer::GetInstance();
			if (!dsm->IsCentralDS())
			{
	                	CrssvrTeamsManager::Instance()->UpdateSeasonPos(res->seasontop.updatetime, res->seasontop.pos_map);
			}
			else
			{
				CrossCrssvrTeamsManager::Instance()->UpdateSeasonTop(res->seasontop.updatetime, res->seasontop.table);	
			}
		}

	}

	void OnTimeout()
	{
		// TODO Client Only
	}

};

};
#endif
