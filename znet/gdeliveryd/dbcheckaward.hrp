
#ifndef __GNET_DBCHECKAWARD_HPP
#define __GNET_DBCHECKAWARD_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbcheckawardarg"
#include "dbcheckawardres"
#include "friendcallbackmanager.hpp"

namespace GNET
{

class DBCheckAward : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbcheckaward"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBCheckAwardArg *arg = (DBCheckAwardArg *)argument;
		// DBCheckAwardRes *res = (DBCheckAwardRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBCheckAwardArg *arg = (DBCheckAwardArg *)argument;
		DBCheckAwardRes *res = (DBCheckAwardRes *)result;
		FriendCallbackManager *fcbmanager = FriendCallbackManager::GetInstance();

		LOG_TRACE("GDelivery::DBCheckAward, retcode=%d, roleid=%d, award_type=%d, recaller_list.size=%d\n", res->retcode, arg->roleid, res->award_type, res->recaller_list.size());
		if((res->retcode != ERR_CALLBACK_EXCEPTION) && (res->award_type != 0))
		{
			fcbmanager->NotifyAwardInfo(arg->roleid, res->award_type, res->recaller_list);
		}
	}

	void OnTimeout(Rpc::Data *argument)
	{
		DBCheckAwardArg *arg = (DBCheckAwardArg *)argument;
		LOG_TRACE("DBCheckAward timeout. roleid=%d\n", arg->roleid);
	}

};

};
#endif
