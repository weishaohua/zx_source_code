
#ifndef __GNET_SECTINVITE_HPP
#define __GNET_SECTINVITE_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "sectinvitearg"
#include "sectinviteres"
#include "dbsectjoin.hrp"
#include "sectrecruit_re.hpp"

namespace GNET
{

class SectInvite : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "sectinvite"
#undef	RPC_BASECLASS

	int localsid;
	int linksid;

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// SectInviteArg *arg = (SectInviteArg *)argument;
		// SectInviteRes *res = (SectInviteRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		SectInviteArg *arg = (SectInviteArg *)argument;
		SectInviteRes *res = (SectInviteRes *)result;
		DEBUG_PRINT("SectInvite, roleid=%d,invitee=%d,retcode=%d", arg->roleid, arg->invitee, res->retcode);
		SectRecruit_Re re;
		re.sectid = arg->roleid;
		re.disciple = arg->invitee;
		re.localsid =  localsid;

		if (res->retcode == ERR_SUCCESS)
		{
			unsigned int capacity = 1;
			if(!SectManager::Instance()->CheckCapacity(arg->roleid, capacity))
			{
				re.retcode =  ERR_SECT_FULL;
				GDeliveryServer::GetInstance()->Send(linksid, re);
				return;
			}
			DBSectJoin* rpc = (DBSectJoin*) Rpc::Call( RPC_DBSECTJOIN, DBSectJoinArg(arg->roleid, arg->invitee, capacity));
			GameDBClient::GetInstance()->SendProtocol(rpc);
		}
		else
		{
			re.retcode =  ERR_SECT_REFUSE;
			GDeliveryServer::GetInstance()->Send(linksid, re);
		}
	}

	void OnTimeout()
	{
	}

};

};
#endif
