
#ifndef __GNET_DBCRSSVRTEAMSRENAME_HPP
#define __GNET_DBCRSSVRTEAMSRENAME_HPP

#include "rpcdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "dbcrssvrteamsrenamearg"
#include "dbcrssvrteamsrenameres"

#include "postcrssvrteamsrename.hrp"
#include "gtplatformagent.h"
#include "crssvrteamsmanager.h"
#include "crssvrteamsnotify_re.hpp"
#include "synccrosscrssvrteamsrename.hrp"

namespace GNET
{

class DBCrssvrTeamsRename : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "dbcrssvrteamsrename"
#undef	RPC_BASECLASS

	int linksid, localsid;
	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// DBCrssvrTeamsRenameArg *arg = (DBCrssvrTeamsRenameArg *)argument;
		// DBCrssvrTeamsRenameRes *res = (DBCrssvrTeamsRenameRes *)result;
	}

	void NotifyCentral(int zoneid, int teamid, Octets& oldname, Octets& newname)
	{
		//if(!CrssvrTeamsManager::Instance()->IsRoleCrossOnline(teamid))
		//	return;

		SyncCrossCrssvrTeamsRename* rpc = (SyncCrossCrssvrTeamsRename*) Rpc::Call(RPC_SYNCCROSSCRSSVRTEAMSRENAME, SyncCrossCrssvrTeamsRenameArg(zoneid, teamid, oldname, newname));
		CentralDeliveryClient::GetInstance()->SendProtocol(rpc);
	}


	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		DBCrssvrTeamsRenameArg *arg = (DBCrssvrTeamsRenameArg *)argument;
		DBCrssvrTeamsRenameRes *res = (DBCrssvrTeamsRenameRes *)result;
		
		DEBUG_PRINT("DBCrssvrTeamsRename, retcode=%d, teamid=%d, roleid=%d, changetime=%d", res->retcode, arg->teamid, arg->roleid, res->changetime);
		
		PostCrssvrTeamsRenameArg post_argument(res->retcode==ERR_SUCCESS,GDeliveryServer::GetInstance()->zoneid,arg->teamid,arg->oldname, arg->newname);
		PostCrssvrTeamsRename* rpc = (PostCrssvrTeamsRename*) Rpc::Call(RPC_POSTCRSSVRTEAMSRENAME, post_argument);
		UniqueNameClient::GetInstance()->SendProtocol(rpc);

		if(res->retcode==ERR_SUCCESS)
		{
	                int ret = CrssvrTeamsManager::Instance()->OnNameChange(arg->teamid,res->changetime,  arg->newname);
			if(ret != ERR_SUCCESS)
				GDeliveryServer::GetInstance()->Send(linksid, CrssvrTeamsNotify_Re(ret, arg->roleid, arg->teamid, localsid));
			else
			{
				int zoneid = GDeliveryServer::GetInstance()->zoneid;
				NotifyCentral(zoneid, arg->teamid, arg->oldname, arg->newname);
			}
		}
		else
		{
			GDeliveryServer::GetInstance()->Send(linksid,CrssvrTeamsNotify_Re(res->retcode,arg->roleid,arg->teamid,localsid));
		}
	}

	void OnTimeout()
	{
		DBCrssvrTeamsRenameArg *arg = (DBCrssvrTeamsRenameArg *)argument;
		Log::log( LOG_ERR,"DBCrssvrTeamsRename: timeout. roleid=%d,teamid=%d", arg->roleid, arg->teamid);
		GDeliveryServer::GetInstance()->Send(linksid,CrssvrTeamsNotify_Re(ERR_CRSSVRTEAMS_DB_TIMEOUT,arg->roleid,arg->teamid,localsid));

	}

};

};
#endif
